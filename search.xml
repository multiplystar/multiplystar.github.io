<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JS100题</title>
      <link href="/2022/01/01/JS100%E9%A2%98/"/>
      <url>/2022/01/01/JS100%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="es6-的新特性"><a href="#es6-的新特性" class="headerlink" title="es6 的新特性"></a>es6 的新特性</h3><ul><li>const 常量、let 变量</li><li>模板字符串 ${变量名} 可以直接使用赋值给变量的字符串</li><li>箭头函数</li><li>函数的参数默认值</li><li>对象和数组解构</li><li>for … of 对数组/类数组或可迭代的对象进行循环操作 和 for … in 对数组/对象属性进行循环操作</li></ul><hr><h3 id="promise-的使用，怎么用-es5-实现-promise"><a href="#promise-的使用，怎么用-es5-实现-promise" class="headerlink" title="promise 的使用，怎么用 es5 实现 promise"></a>promise 的使用，怎么用 es5 实现 promise</h3><hr><h3 id="if-作用域"><a href="#if-作用域" class="headerlink" title="if 作用域"></a>if 作用域</h3><p>if 没有作用域，但在 if 语句中使用 es6 的 const、let，可以让 if 看上去有作用域，因为它们有块级作用域</p><hr><h3 id="原型链和作用域链的区别"><a href="#原型链和作用域链的区别" class="headerlink" title="原型链和作用域链的区别"></a>原型链和作用域链的区别</h3><ul><li>原型链：当访问一个对象的某个属性时，会先在这个对象本身的属性上找，若没找到，会去这个属性上的<em>proto</em>属性上找，即这个构造函数的原型，如果还没找到，会继续在<em>proto</em>上找<br>直到最顶层 Object 对象，找不到即为 undefined。这样一层层连在一起的就是原型链</li><li>作用域链：变量取值会到创建这个变量的函数的作用域中取值，如果找不到，就会向上级作用域去查，直到查到全局作用域，这个查找过程形成的链条就是作用域链<br><strong>区别：</strong><ul><li>作用域是对变量而言，原型链是对对象的属性而言</li><li>作用域链顶层是 window，原型链顶层是 Object</li></ul></li></ul><hr><h3 id="js-判断类型"><a href="#js-判断类型" class="headerlink" title="js 判断类型"></a>js 判断类型</h3><ul><li>typeof<br>用于检测基本类型，但检测不出 null 和数组，结果都为 object</li><li>instanceof<br>用于检测复杂类型以及级成关系，但不能检测基本类型</li><li>constructor<br>constructor 不能判断 undefined 和 null，因为它们没 constructor 方法，constructor 的指向是可以被改变，所以不安全</li><li>Object.prototype.toString.call<br>全类型都可以判断</li></ul><hr><h3 id="检测数据类型"><a href="#检测数据类型" class="headerlink" title="检测数据类型"></a>检测数据类型</h3><ul><li><code>typeof：console.log(typeof true) //boolean</code></li><li><code>instaceof：console.log([1,2] instanceof Array) // true</code></li><li><code>constructor：console.log([1, 2].constructor === Array) // ture</code></li><li><code>Object.prototype.toString.call：Object.prototype.toString.call([1, 2]) // [object Array]</code></li></ul><hr><h3 id="普通函数和箭头函数的区别"><a href="#普通函数和箭头函数的区别" class="headerlink" title="普通函数和箭头函数的区别"></a>普通函数和箭头函数的区别</h3><ul><li>普通函数：可以通过 bind、call、apply 改变 this 指向，可以使用 new</li><li>箭头函数：本身没 this 指向，它的 this 在定义的时候继承自外层第一个普通函数的 this，被继承的普通函数的 this 指向改变，箭头函数的 this 指向也会跟着改变</li><li>箭头函数外层没普通函数时，this 指向 window，不能通过 bind、call、apply 改变 this 指向，使用 new 调</li><li>用箭头函数会报错，因为箭头函数没有 constructor</li><li>箭头函数不能绑定 arguments</li><li>箭头函数没有原型属性</li></ul><hr><h3 id="如何用原生-js-给一个按钮绑定两个-onclick-事件"><a href="#如何用原生-js-给一个按钮绑定两个-onclick-事件" class="headerlink" title="如何用原生 js 给一个按钮绑定两个 onclick 事件"></a>如何用原生 js 给一个按钮绑定两个 onclick 事件</h3><p>前后添加两个 click 事件函数</p><hr><h3 id="document-write-和-innerHTML-的区别"><a href="#document-write-和-innerHTML-的区别" class="headerlink" title="document.write 和 innerHTML 的区别"></a>document.write 和 innerHTML 的区别</h3><ul><li>document.write 将内容写入页面，清空替换掉原来的内容，导致重绘</li><li>document.innerHTML 将内容写入到某个 DOM 节点，不会重绘</li></ul><hr><h3 id="栈和堆的区别"><a href="#栈和堆的区别" class="headerlink" title="栈和堆的区别"></a>栈和堆的区别</h3><ul><li>堆：动态分配内存，内存大小不一，不会自动释放<ul><li>引用类型的数据都是存储在堆中，栈中会存储这些数据的地址指针，并指向堆中的具体数据</li></ul></li><li>栈：自动分配相对固定大小的内存空间，并由系统自动释放<ul><li>基本类型都是存储在栈中，每种类型的数据占用的空间大小是确定的，并由系统自动分配和释放，内存可以及时回收</li></ul></li></ul><hr><h3 id="undefined-和-null-区别"><a href="#undefined-和-null-区别" class="headerlink" title="undefined 和 null 区别"></a>undefined 和 null 区别</h3><ul><li>undefined：没设置值的变量，会自动赋值 undefined</li><li>null：什么都没有，表示一个空对象引用</li><li>区别：<ul><li>typeof undefined //undefined</li><li>typeof null //object</li><li>null === undefined //false</li><li>null == undefined //true</li></ul></li></ul><hr><h3 id="eval-的作用"><a href="#eval-的作用" class="headerlink" title="eval()的作用"></a>eval()的作用</h3><ul><li>eval(string)函数计算 JavaScript 字符串，并把它作为脚本代码来执行</li><li>如果参数是一个表达式，eval()函数将执行表达式</li><li>如果参数是 JavaScript 语句，eval()将执行 JavaScript 语句</li><li>如果执行结果是一个值就返回，不是就返回 undefined，如果参数不是一个字符串，则直接返回该参数<br>特殊：eval(“{b:2}”) //声明一个对象<br>eval(“({b:2})”) //返回对象 {b:2}</li></ul><hr><h3 id="JS-哪些操作会造成内存泄漏"><a href="#JS-哪些操作会造成内存泄漏" class="headerlink" title="JS 哪些操作会造成内存泄漏"></a>JS 哪些操作会造成内存泄漏</h3><p>内存泄漏是指一块被分配的内存既不能使用，也不能回收，直到浏览器进程结束</p><ul><li>意外的全局变量</li><li>闭包</li><li>没有清理的 dom 元素(dom 元素赋值给变量，又通过 removeChild 移除 dom 元素，但 dom 元素的引用还在内存中)</li><li>被遗忘的定时器或回调</li><li>子元素存在引用引起的内存泄漏</li></ul><hr><h3 id="谈谈垃圾回收机制方式及内存管理"><a href="#谈谈垃圾回收机制方式及内存管理" class="headerlink" title="谈谈垃圾回收机制方式及内存管理"></a>谈谈垃圾回收机制方式及内存管理</h3><p>JavaScript 在定义变量时就完成了内存分配。当不再使用变量了就会被回收，因为其开销比较大，垃圾收集器会定期(周期性)找出那些不再继续使用的变量，然后释放其内存</p><ul><li>垃圾回收<br>标记清除法：当变量进入环境时，将这个变量标记为’进入环境’。当标记离开环境时，标记为’离开环境’，离开环境的变量会被回收<br>引用技计数法：跟踪记录每个值被引用的次数，如果没有被引用，就会回收</li><li>内存管理<br>内存分配-&gt;内存使用-&gt;内存回收</li></ul><hr><h3 id="什么是闭包，如何使用，为什么要使用"><a href="#什么是闭包，如何使用，为什么要使用" class="headerlink" title="什么是闭包，如何使用，为什么要使用"></a>什么是闭包，如何使用，为什么要使用</h3><ul><li>闭包就是能够读取其他函数内部变量的函数</li><li>使用方法：在一个函数内部创建另一个函数</li><li>最大用处：读取其他函数的变量值，让这些变量始终保存在内存中</li><li>缺点：会引起内存泄漏(引用无法被销毁，一直存在)</li></ul><hr><h3 id="解释-JSONP-的工作原理，以及它为什么不是真正的-AJAX"><a href="#解释-JSONP-的工作原理，以及它为什么不是真正的-AJAX" class="headerlink" title="解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX"></a>解释 JSONP 的工作原理，以及它为什么不是真正的 AJAX</h3><p>JSONP 是一种非正式传输协议，允许用户传递一个 callback 给服务端，然后服务端返回数据时会将这个 callback 参数作为函数名来包裹住 JSON 数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了<br>当 GET 请求从后台页面返回时，可以返回一段 JavaScript 代码，这段代码会自动执行，可以用来负责调用后台页面中的一个 callback 函数<br><strong>它们的实质不同</strong></p><ul><li>ajax 的核心是通过 xmlHttpRequest 获取非本页内容</li><li>jsonp 的核心是动态添加 script 标签调用服务器提供的 js 脚本</li><li>jsonp 只支持 get 请求，ajax 支持 get 和 post 请求</li></ul><hr><h3 id="解释下-JavaScript-的同源策略"><a href="#解释下-JavaScript-的同源策略" class="headerlink" title="解释下 JavaScript 的同源策略"></a>解释下 JavaScript 的同源策略</h3><p>同源指协议、域名、端口相同<br>同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性</p><hr><h3 id="JS-事件冒泡和-JS-事件代理-事件委托"><a href="#JS-事件冒泡和-JS-事件代理-事件委托" class="headerlink" title="JS 事件冒泡和 JS 事件代理(事件委托)"></a>JS 事件冒泡和 JS 事件代理(事件委托)</h3><ul><li>事件冒泡：<br>当一个元素接收到事件的时候，会把它接收到的事件传给它的父级，一直到 window，此过程像冒泡一样。如果在某层想要中止冒泡，则使用 event.stopPropagation()<br>但当大量标签大量事件的时候，不可能为每个元素都加上事件(事件绑定占用事件，浏览器跟踪事件会占用很多内存，且不是每个事件都会被使用到)，因此需要事件委托来解决</li><li>事件委托：<br>将事件给最外层的元素，自己不实现逻辑，由最外层元素来代理。(判断事件源，做不同处理)</li></ul><hr><h3 id="new-操作符做了什么事"><a href="#new-操作符做了什么事" class="headerlink" title="new 操作符做了什么事"></a>new 操作符做了什么事</h3><ul><li><code>var obj = new Fun()</code> //做了三件事<ul><li><code>var obj = &#123;&#125;</code> //创建一个空对象</li><li><code>obj._proto_ = Fun.prototype</code> //空对象的<em>proto</em>指向构造函数的原型对象</li><li><code>Fun.call(obj)</code> //构造函数 this 指向替换成 obj</li></ul></li><li>实现一个 new<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">fn, ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="built_in">Object</span>.create(fn.prototype);</span><br><span class="line">  <span class="keyword">const</span> ret = fn.apply(obj, arg);</span><br><span class="line">  <span class="comment">//根据规范，返回 null 和 undefined 不处理，依然返回 obj，不能使用</span></span><br><span class="line">  <span class="comment">//typeof result === &#x27;object&#x27; ? result : obj</span></span><br><span class="line">  <span class="keyword">return</span> ret <span class="keyword">instanceof</span> <span class="built_in">Object</span> ? ret : obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="js-延迟加载的方式有哪些"><a href="#js-延迟加载的方式有哪些" class="headerlink" title="js 延迟加载的方式有哪些"></a>js 延迟加载的方式有哪些</h3><ul><li>defer 属性<script src="test.js" defer="defer"></script>立即下载，但会等到整个页面都解析完成之后再执行</li><li>async 属性<script src="test.js" async></script>不让页面等待脚本下载和执行(异步下载)，但是无法控制加载的顺序</li><li>动态创建 script 标签</li><li>使用定时器延迟</li><li>让 js 最后加载</li></ul><hr><h3 id="promise、async-有什么区别"><a href="#promise、async-有什么区别" class="headerlink" title="promise、async 有什么区别"></a>promise、async 有什么区别</h3><ul><li>什么是 Async/Await<ul><li>async/await 是写异步代码的新方式，使用方式看起来像同步</li><li>async/await 是基于 Promise 实现的，它不能用于普通的回调函数，await 只能在 async 函数中使用</li><li>默认返回一个 Promise 实例，不能改变</li><li>await 下面的代码是异步的，后面的代码是同步的</li></ul></li><li>什么是 Promise<ul><li>为了解决异步嵌套而产生，让代码更易于理解</li></ul></li><li>区别：async/await 让代码更像同步，进一步优化了代码</li></ul><hr><h3 id="和-的区别，什么情况下用"><a href="#和-的区别，什么情况下用" class="headerlink" title="==和===的区别，什么情况下用=="></a>==和===的区别，什么情况下用==</h3><p>==是判断转换后的值是否相等，若是对象类型，则是判断空间地址是否相等<br>===是判断值及类型是否完全相等<br>不需要判断类型时可以用==</p><hr><h3 id="bind、call、apply-的区别"><a href="#bind、call、apply-的区别" class="headerlink" title="bind、call、apply 的区别"></a>bind、call、apply 的区别</h3><ul><li>bind 方法可以返回一个切换 this 指向的新函数，让函数什么时候调用就什么时候调用</li><li>call 方法、apply 方法则只是临时改变 this 指向，然后直接调用函数，其中 call 方法可以传入多个参数，apply 方法传入的参数必须是数组</li></ul><hr><h3 id="如何判断链表是否有环"><a href="#如何判断链表是否有环" class="headerlink" title="如何判断链表是否有环"></a>如何判断链表是否有环</h3><p>利用步长不同的俩指针进行判断，重合则证明链表有环</p><hr><h3 id="介绍暂时性死区"><a href="#介绍暂时性死区" class="headerlink" title="介绍暂时性死区"></a>介绍暂时性死区</h3><p>在代码块内，使用 let、const 命令声明变量之前，该变量都是不可用的。在语法上，称为”暂时性死区”</p><hr><h3 id="两个对象如何比较"><a href="#两个对象如何比较" class="headerlink" title="两个对象如何比较"></a>两个对象如何比较</h3><ul><li>判断两个类型是否为对象</li><li>判断两个对象 key 长度是否一致</li><li>判断属性 value 值的数据类型，根据不同数据类型作比较<ul><li>是对象，则重复这个步骤</li><li>是数组，转字符串比较</li><li>是基本类型，直接判断</li></ul></li></ul><hr><h3 id="介绍各种异步方案"><a href="#介绍各种异步方案" class="headerlink" title="介绍各种异步方案"></a>介绍各种异步方案</h3><ul><li>回调函数</li><li>promise</li><li>async/await</li></ul><hr><h3 id="Promise-和-Async-处理失败的时候有什么区别"><a href="#Promise-和-Async-处理失败的时候有什么区别" class="headerlink" title="Promise 和 Async 处理失败的时候有什么区别"></a>Promise 和 Async 处理失败的时候有什么区别</h3><ul><li>Promise 错误可以在构造体里面被捕获，而 async/await 返回的是 promise，可以通过 catch 直接捕获错误</li><li>await 后接的 Promise.reject 都必须被捕获，否则会中断执行</li></ul><hr><h3 id="JS-为什么要区分微任务和宏任务"><a href="#JS-为什么要区分微任务和宏任务" class="headerlink" title="JS 为什么要区分微任务和宏任务"></a>JS 为什么要区分微任务和宏任务</h3><ul><li>js 是单线程的，但分同步异步</li><li>微任务和宏任务皆为异步任务，它们都属于一个队列</li><li>宏任务一般是：script，setTimeout，setInterval，setImmediate</li><li>微任务：原生 Promise</li><li>遇到微任务，先执行微任务，执行完后如果没有微任务，就执行下一个宏任务，如果有微任务，就按顺序一个个执行微任务</li></ul><hr><h3 id="Promise-和-setTimeout-执行先后的区别"><a href="#Promise-和-setTimeout-执行先后的区别" class="headerlink" title="Promise 和 setTimeout 执行先后的区别"></a>Promise 和 setTimeout 执行先后的区别</h3><p>Promise 是微任务，setTimeout 是宏任务，先执行微任务，如还有微任务，执行完微任务再执行下一个宏任务</p><hr><h3 id="单例、工厂、观察者项目中实际场景"><a href="#单例、工厂、观察者项目中实际场景" class="headerlink" title="单例、工厂、观察者项目中实际场景"></a>单例、工厂、观察者项目中实际场景</h3><hr><h3 id="添加原生事件不移除为什么会内存泄漏"><a href="#添加原生事件不移除为什么会内存泄漏" class="headerlink" title="添加原生事件不移除为什么会内存泄漏"></a>添加原生事件不移除为什么会内存泄漏</h3><ul><li>给元素添加事件处理，而事件处理内部使用了元素的引用，老版本 IE 无法检测 DOM 节点与 JS 代码之间的循环引用，因此会导致内存泄漏</li><li>而现版本浏览器使用更先进的垃圾回收算法，可以正确检测和处理循环引用，回收节点内存时，不必调用 removeEventListenr 了</li></ul><hr><h3 id="setTimeout-0-和-setTimeout-2-之间的区别"><a href="#setTimeout-0-和-setTimeout-2-之间的区别" class="headerlink" title="setTimeout(0)和 setTimeout(2)之间的区别"></a>setTimeout(0)和 setTimeout(2)之间的区别</h3><p>定时器表面意思是过指定时间后执行，但真正的含义是每过指定时间后，会有 fn 进入事件队列</p><ul><li>setTimeout(fn,0)的含义是，指定某个任务在主线程最早可得的空闲时间执行，意思就是不用再等多少秒了，只要主线程执行栈内的同步任务全部执行完成，栈为空就马上执行</li><li>setTimeout(fn,1) 1 毫秒后执行，但是因为要先执行前面的宏任务，所以不一定就是在一毫秒后执行，取决于队列里任务执行的速度</li></ul><hr><h3 id="for…in-和-object-keys-的区别"><a href="#for…in-和-object-keys-的区别" class="headerlink" title="for…in 和 object.keys 的区别"></a>for…in 和 object.keys 的区别</h3><p>Object.keys 不会遍历继承的原型属性<br>for…in 会遍历继承的原型属性</p><hr><h3 id="XML-和-JSON-的区别"><a href="#XML-和-JSON-的区别" class="headerlink" title="XML 和 JSON 的区别"></a>XML 和 JSON 的区别</h3><ul><li>xml 是重量级的，json 是轻量级的</li><li>xml 在传输过程中比较占带宽，json 占带宽少，易于压缩</li><li>xml 和 json 都用在项目交互下，xml 多用于做配置文件，json 用于数据交互</li></ul><hr><h3 id="说说对AMD和-CommonJS-的理解"><a href="#说说对AMD和-CommonJS-的理解" class="headerlink" title="说说对ＡＭＤ和 CommonJS 的理解"></a>说说对ＡＭＤ和 CommonJS 的理解</h3><p>两者都是为了实现模块化编程而出现的</p><ul><li>commonjs：通常被应用于服务器，在服务器端，模块的加载和执行都在本地完成，因此 Commonjs 不要求模块加载的异步化<br>核心思想：一个文件就是一个模块，通过 require 方法来同步加载要依赖的模块，然后通过 exports 或 module.exports 来导出需要暴露的接口</li><li>AMD：可以实现异步加载依赖模块，预加载，在并行加载 js 文件同时，还会解析执行该模块。虽然可以并行加载，异步处理，但是加载顺序不一定</li><li>CMD：懒加载，虽然会一开始就并行加载 js 文件，但不会执行，而是在需要的时候才执行</li></ul><hr><h3 id="js-的设计模式"><a href="#js-的设计模式" class="headerlink" title="js 的设计模式"></a>js 的设计模式</h3><p>单例模式、策略模式、代理模式、迭代器模式…等等</p><hr><h3 id="计算-“1”-”2”-”3”-map-parseInt-的答案"><a href="#计算-“1”-”2”-”3”-map-parseInt-的答案" class="headerlink" title="计算[“1”,”2”,”3”].map(parseInt)的答案"></a>计算[“1”,”2”,”3”].map(parseInt)的答案</h3><hr><h3 id="常见兼容性问题"><a href="#常见兼容性问题" class="headerlink" title="常见兼容性问题"></a>常见兼容性问题</h3><ul><li>事件对象兼容</li><li>阻止事件冒泡兼容</li><li>阻止默认行为兼容</li><li>事件监听兼容</li><li>事件目标对象兼容</li></ul><hr><h3 id="说说对-promise-的了解"><a href="#说说对-promise-的了解" class="headerlink" title="说说对 promise 的了解"></a>说说对 promise 的了解</h3><ul><li>ES6 新增的类</li><li>promise 是为解决异步处理回调金字塔问题而产生的</li><li>promise 本身是同步变成，可以管理异步操作</li><li>有三种状态：pending、fullfilled、reject，状态一旦决定就不会改变</li><li>promise 的两个参数：异步操作执行成功，执行 resolve 方法；异步操作失败，执行 reject 方法</li></ul><hr><h3 id="模块化开发怎么做"><a href="#模块化开发怎么做" class="headerlink" title="模块化开发怎么做"></a>模块化开发怎么做</h3><hr><h3 id="js-有哪些内置对象"><a href="#js-有哪些内置对象" class="headerlink" title="js 有哪些内置对象"></a>js 有哪些内置对象</h3><p>String 对象、Array 对象、Object 对象、Number 对象、Math 对象、Date 对象、Boolean 对象</p><hr><h3 id="说几条写-JS-的基本规范"><a href="#说几条写-JS-的基本规范" class="headerlink" title="说几条写 JS 的基本规范"></a>说几条写 JS 的基本规范</h3><ul><li>不要在同一行声明多个变量</li><li>使用 === 和！==来比较</li><li>不要使用全局函数</li><li>变量在使用之前的位置声明(减少变量提升干扰)</li><li>if 用花括号包起来</li><li>写注释</li></ul><hr><h3 id="JS-有几种类型的值？画出它们的内存图"><a href="#JS-有几种类型的值？画出它们的内存图" class="headerlink" title="JS 有几种类型的值？画出它们的内存图"></a>JS 有几种类型的值？画出它们的内存图</h3><p>栈：原始数据类型(Number、String、Boolean、Undefined、Null)<br>堆：引用数据类型(数组、对象、函数)【栈中存放的是指向堆的地址】</p><hr><h3 id="href-”-”与-href-”javascript-void-0-的区别”"><a href="#href-”-”与-href-”javascript-void-0-的区别”" class="headerlink" title="href=”#”与 href=”javascript:void(0)的区别”"></a>href=”#”与 href=”javascript:void(0)的区别”</h3><ul><li>“#”包含了一个位置信息，默认的锚是#top 也就是网页的上端。页面很长的时候会使用#来定位页面的具体位置，格式为：#+id</li></ul><ul><li>javascript:void(0)，仅仅表示一个死链接</li></ul><hr><h3 id="对-this-的理解"><a href="#对-this-的理解" class="headerlink" title="对 this 的理解"></a>对 this 的理解</h3><ul><li>单独使用，this 表示全局对象</li><li>在函数中，this 表示全局对象</li><li>在对象的一个函数方法中，this 表示这个对象</li><li>可以通过 apply、bind 来更改 this 的指向<br>【this 永远指向最后调用它的对象，仅当它在对象的一个函数方法中时会有差异】</li></ul><hr><h3 id="promise-all-返回什么"><a href="#promise-all-返回什么" class="headerlink" title="promise.all 返回什么"></a>promise.all 返回什么</h3><p>如果没报错，返回执行结果[res1,res2,…]<br>如果报错，则返回第一个报错的 promise 结果</p><hr><h3 id="多个-await-的执行顺序，如果要同步执行如何实现"><a href="#多个-await-的执行顺序，如果要同步执行如何实现" class="headerlink" title="多个 await 的执行顺序，如果要同步执行如何实现"></a>多个 await 的执行顺序，如果要同步执行如何实现</h3><p>使用 Promise.all<br>promise.all 是等所有异步操作都完成之后返回结果，相当于让这些异步同步了</p><hr><h3 id="typeof-和-instance-of-检测数据类型的区别"><a href="#typeof-和-instance-of-检测数据类型的区别" class="headerlink" title="typeof 和 instance of 检测数据类型的区别"></a>typeof 和 instance of 检测数据类型的区别</h3><ul><li>typeof 返回值是一个字符串，用来说明变量的数据类型 instanceof 用于判断一个变量是否属于某个对象的实例</li></ul><hr><h3 id="使元素消失的方法"><a href="#使元素消失的方法" class="headerlink" title="使元素消失的方法"></a>使元素消失的方法</h3><ul><li>opacity：0，隐藏元素(透明度设置)，但不会改变页面布局，但可以触发该元素绑定了的事件</li><li>visibility：hidden，隐藏元素，但不会改变页面布局，也不可以触发该元素绑定了的事件</li><li>display：none，在 dom 树中删除元素，会改变页面布局</li></ul><hr><h3 id="谈谈浅拷贝和深拷贝-克隆"><a href="#谈谈浅拷贝和深拷贝-克隆" class="headerlink" title="谈谈浅拷贝和深拷贝(克隆)"></a>谈谈浅拷贝和深拷贝(克隆)</h3><ul><li>浅拷贝：只拷贝了基本类型的数据，而引用类型数据，复制后也会发生引用，这就是浅拷贝。<ul><li>浅拷贝仅仅是指向被复制的内存地址，如果原地址中对象被改变，那么浅拷贝出来的对象也会相应改变</li></ul></li><li>深拷贝：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址<ul><li>实现深拷贝：JSON.parse(JSON.stringify())、递归</li></ul></li></ul><hr><h3 id="常见的设计模式"><a href="#常见的设计模式" class="headerlink" title="常见的设计模式"></a>常见的设计模式</h3><ul><li>js 工厂模式、js 构造函数模式、js 原型模式、构造函数+原型的 js 混合模式、构造函数+原型的动态原型模式、观察者模式、发布订阅模式</li></ul><hr><h3 id="js-继承方式有哪些？"><a href="#js-继承方式有哪些？" class="headerlink" title="js 继承方式有哪些？"></a>js 继承方式有哪些？</h3><ul><li>原型链继承，核心：将父类的实例作为子类的原型</li><li>构造继承，核心：使用父类的构造函数来增强子类实例，等于复制父类的实例属性给子类</li><li>实例继承，核心：为父类添加新特性，作为子类实例返回</li><li>拷贝继承</li><li>组合继承，核心：通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</li><li>寄生组合继承，核心：通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造时，就不会初始化两次实例方法，避免组合继承的缺点</li></ul><hr><h3 id="怎么看待闭包？"><a href="#怎么看待闭包？" class="headerlink" title="怎么看待闭包？"></a>怎么看待闭包？</h3><ul><li>闭包就是在函数里面声明函数，本质上是在函数内部和函数外部搭建一座桥梁，使得子函数可以访问父函数中所有局部变量，反之则不可以</li><li>另一个作用是保护变量不受外界污染，使其一直存在内存中</li><li>尽量少用闭包，会造成内存泄漏，消耗内存</li></ul><hr><h3 id="如何理解原型和原型链"><a href="#如何理解原型和原型链" class="headerlink" title="如何理解原型和原型链"></a>如何理解原型和原型链</h3><ul><li>把所有对象共用属性都放在堆内存的一个对象，然后让每个对象的<strong>proto</strong>存储这个对象的地址，这个共用属性就是原型</li><li>原型的出现是为了减少内存消耗</li><li>原型链则是对象通过<strong>proto</strong>向当前实例所属类的原型上查找属性/方法的机制，一直往上找形成的一条链，链的最顶端是 Object 对象，若查找失败则返回 undefined</li></ul><hr><h3 id="浏览器渲染的主要流程是？"><a href="#浏览器渲染的主要流程是？" class="headerlink" title="浏览器渲染的主要流程是？"></a>浏览器渲染的主要流程是？</h3><ul><li>将 html 代码按照深度优先遍历生成 DOM 树，css 文件下载完后也会进行渲染，生成相应的 CSSOM</li><li>当所有 css 文件下载完且 CSSOM 构建结束后，就会和 DOM 一起生成 Render Tree</li><li>接下来，浏览器就会进入 Layout 环节，将所有的节点位置计算出来</li><li>最后，通过 Painting 环节，将所有的节点内容呈现到屏幕上</li></ul><hr><h3 id="从输入-url-地址到页面相应都发生了什么？"><a href="#从输入-url-地址到页面相应都发生了什么？" class="headerlink" title="从输入 url 地址到页面相应都发生了什么？"></a>从输入 url 地址到页面相应都发生了什么？</h3><ul><li>浏览器地址栏输入 URL 并按下回车</li><li>浏览器查找当前 URL 是否存在 DNS 缓存，并比较缓存是否过期，缓存不可用则请求远程 DNS 服务器</li><li>DNS 解析 URL 对应的 IP</li><li>根据 IP 建立 TCP 连接(三次握手)</li><li>HTTP 发起请求</li><li>服务器处理请求，浏览器接收 HTTP 响应</li><li>渲染页面，构建 DOM 树</li><li>关闭 TCP 连接(四次挥手)</li></ul><hr><h3 id="sessionStorage、cookie、localStorage-的区别"><a href="#sessionStorage、cookie、localStorage-的区别" class="headerlink" title="sessionStorage、cookie、localStorage 的区别"></a>sessionStorage、cookie、localStorage 的区别</h3><ul><li>相同：保存在浏览器端，且同源</li><li>不同：<ul><li>cookie<ul><li>始终在同源的 http 请求中携带，即 cookie 在浏览器和服务器间来回传递</li><li>cookie 数据还有路径概念，可以限制 cookie 只属于某个路径下，存储大小限制在 4k 内，因为每次 http 请求都会携带 cookie，所以它只适合存很小的数据</li><li>cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭</li><li>在所有同源窗口中都是共享的</li></ul></li><li>sessionStorage<ul><li>不会自动把数据发给服务器，仅在本地保存</li><li>仅在当前浏览器窗口关闭前有效，不能持久保持，且 不在不同的浏览器窗口中共享，即使是同一个页面</li><li>存储限制在 5M 以内</li></ul></li><li>localStorage<ul><li>不会自动把数据发给服务器，仅在本地保存</li><li>始终有效，窗口或浏览器关闭也一直保存，可用作持久数据</li><li>在所有同源窗口中都是共享的</li><li>存储限制在 5M 以内</li></ul></li></ul></li></ul><hr><h3 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h3><ul><li>在页面中用 js 访问其他网站的数据时，会出现跨域问题，比如用 ajax 请求一些数据接口，浏览器会显示错误</li><li>跨域问题原因：浏览器受到同源策略的限制，当前域名的 js 只能读取同域下的窗口属性</li></ul><hr><h3 id="js-中跨域方法"><a href="#js-中跨域方法" class="headerlink" title="js 中跨域方法"></a>js 中跨域方法</h3><ul><li>同源策略(协议、域名、端口号相同)<ul><li>jsonp 跨域(只能解决 get)<ul><li>原理：动态创建一个 script 标签，利用 script 标签的 src 属性不受同源策略限制，因为所有 src 属性和 href 属性都不受同源策略限制，可以请求第三方服务器资源内容</li><li>步骤：<ul><li>创建一个 script 标签</li><li>script 标签的 src 属性设置接口地址</li><li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li>通过定义函数名去接收返回的数据</li></ul></li></ul></li><li>document.domain 基础域名相同 子域名不同</li><li>window.name 利用在一个浏览器窗口内，载入所有域名都是共享一个 window.name</li><li>服务器设置对 CORS 的支持，原理：服务器设置 Acess-Control-Allow-Origin HTTP 响应头之后，浏览器将会允许跨域请求</li><li>利用 h5 新特性 window.postMessage()</li></ul></li></ul><hr><h3 id="前端有哪些页面优化方法"><a href="#前端有哪些页面优化方法" class="headerlink" title="前端有哪些页面优化方法"></a>前端有哪些页面优化方法</h3><ul><li>从设计实现层面简化页面</li><li>尽量合并 css 和 js 文件，资源尽量合并与压缩，多图片网页采用懒加载</li><li>减少 HTTP 请求数，合理设置 HTTP 缓存</li><li>减少对闭包的使用</li><li>减少对 DOM 的操作</li><li>尽可能使用事件委托来处理事件绑定的操作</li></ul><hr><h3 id="ajax-的四个步骤"><a href="#ajax-的四个步骤" class="headerlink" title="ajax 的四个步骤"></a>ajax 的四个步骤</h3><ul><li>创建 ajax 实例</li><li>执行 open 确定要访问的链接以及同步异步</li><li>监听请求状态</li><li>发送请求</li></ul><hr><h3 id="数组去重的方法"><a href="#数组去重的方法" class="headerlink" title="数组去重的方法"></a>数组去重的方法</h3><ul><li>使用 sort 先将原数组排序，在与相邻的进行比较，如果不同则存入新数组</li><li>利用 ES6 的 set 结构，set 不接受重复数据</li><li>使用 indexof 方法</li></ul><hr><h3 id="ajax-中-get-和-post-请求的区别"><a href="#ajax-中-get-和-post-请求的区别" class="headerlink" title="ajax 中 get 和 post 请求的区别"></a>ajax 中 get 和 post 请求的区别</h3><ul><li>get 一般用于获取数据，get 请求如果需要传递参数，那么默认将参数拼接在 url 后面，安全性较低</li><li>get 传递参数大小有限制，一般会走缓存</li><li>post 一般用于发送数据，post 请求传递参数需要把参数放进请求体，安全性较高</li><li>post 请求参数放进了请求体，对大小没有要求，不会走缓存</li></ul><hr><h3 id="ajax-的状态码"><a href="#ajax-的状态码" class="headerlink" title="ajax 的状态码"></a>ajax 的状态码</h3><ul><li>200：请求成功</li><li>301：永久重定向、302：临时转移、304：读取缓存、307：临时重定向</li><li>400：数据/格式错误、401：权限不够、404：路径错误，找不到问题</li><li>500：服务器的问题、503：超负荷</li></ul><hr><h3 id="移动端的兼容问题"><a href="#移动端的兼容问题" class="headerlink" title="移动端的兼容问题"></a>移动端的兼容问题</h3><hr><h3 id="js-中同步和异步，以及-js-的事件流"><a href="#js-中同步和异步，以及-js-的事件流" class="headerlink" title="js 中同步和异步，以及 js 的事件流"></a>js 中同步和异步，以及 js 的事件流</h3><ul><li>同步：在同一时间内做一件事情</li><li>异步：在同一时间内做多个事件，js 是单线程，但它在浏览器中，浏览器是多线程，可以同一时间执行多个任务</li><li>js 事件流：事件发生时会在元素节点和根节点之间按特定顺序传播，路径所经过的所有节点都会受到该事件，这个传播过程就是事件流</li></ul><hr><h3 id="JS-中常见的异步任务"><a href="#JS-中常见的异步任务" class="headerlink" title="JS 中常见的异步任务"></a>JS 中常见的异步任务</h3><ul><li>定时器、ajax、事件绑定、回调函数、async await、promise</li></ul><hr><h3 id="TCP-的三次握手和四次挥手"><a href="#TCP-的三次握手和四次挥手" class="headerlink" title="TCP 的三次握手和四次挥手"></a>TCP 的三次握手和四次挥手</h3><ul><li>三次握手<ul><li>第一次握手：客户端发送一个 SYN 码给服务器，要求建立数据连接</li><li>第二次握手：服务器 SYN 和自己处理一个 SYN，叫 SYN+ACK，发送给客户端，可以建立连接</li><li>第三次握手：客户端再次发送 ACK 给服务器，服务器验证 ACK 没问题，则建立连接</li></ul></li><li>四次挥手<ul><li>第一次挥手：客户端发送 FIN 报文，通知服务器数据已经传输完毕</li><li>第二次挥手：服务器接收到之后，通知客户端收到了 SYN，发送 ACK 给客户端，数据还没传输完成</li><li>第三次挥手：服务器已经传输完毕，再次发送 FIN 通知客户端，数据已经传输完毕</li><li>第四次挥手：客户端再次发送 ACK，进入 TIME_WAIT 状态，服务器和客户端关闭连接</li></ul></li></ul><hr><h3 id="为什么建立连接是三次握手，而断开连接是四次挥手呢？"><a href="#为什么建立连接是三次握手，而断开连接是四次挥手呢？" class="headerlink" title="为什么建立连接是三次握手，而断开连接是四次挥手呢？"></a>为什么建立连接是三次握手，而断开连接是四次挥手呢？</h3><ul><li>建立连接的时候，服务器在 listen 状态，收到建立连接请求的 syn 报文后，把 ack 和 syn 放在一个报文里发送给客户端。</li><li>而关闭连接时，服务器收到对方的 FIN 报文时，仅仅表示对方不再发送数据，但还能接收数据，而服务器未必把全部数据发送给对方，所以即使可以立即关闭，也可以发送一些数据给对方</li><li>数据发送完毕后，再发送 FIN 报文给对方表示同意现在关闭连接</li><li>由于服务器的 ACK 和 FIN 分开发送，所以多了一次</li></ul><hr><h3 id="DOM-diff-原理"><a href="#DOM-diff-原理" class="headerlink" title="DOM diff 原理"></a>DOM diff 原理</h3><ul><li>如果元素类型发生变化，直接替换</li><li>如果是文本，则比较文本里面的内容，是否有差异，如果是元素就需要比较当前元素的属性是否相等，会先比较可以，再比较类型</li></ul><hr><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul><li>全局作用域<ul><li>浏览器打开一个页面时，浏览器会给 js 代码提供一个全局的运行环境，这个环境就是全局作用域</li><li>一个页面只有一个全局作用域，全局作用域下有一个 window 对象，window 是全局作用域下最大的一个内置对象</li><li>定义全局变量会给 window 新增一个键值对，属性名是变量名，属性值是变量存储的值，若变量只被 var 过，那么值为 undefined</li><li>私有作用域可以获取全局变量，全局作用域不能获取私有变量</li></ul></li><li>私有作用域<ul><li>函数执行会形成一个新的私有作用域(执行多次，形成多个私有作用域)</li><li>私有作用域在全局作用域中形成，具有包含的关系</li><li>在一个全局作用域中，可以有多个私有作用域</li><li>在私有作用域下定义的变量都是私有变量，形参也是私有变量，函数体中通过 function 定义的函数也是私有的</li></ul></li><li>块级作用域<ul><li>es6 中新引入的一种作用域，js 常见的 if、for、while 等都是具备块级作用域(本身并非块级作用域，只是通过 let、const 等让其看上去有块级作用域)</li><li>块级作用域的同一变量不能被重复声明</li></ul></li><li>上级作用域<ul><li>函数在哪定义，上级作用域就在哪</li></ul></li></ul><hr><h3 id="map-和-forEach-的区别"><a href="#map-和-forEach-的区别" class="headerlink" title="map 和 forEach 的区别"></a>map 和 forEach 的区别</h3><ul><li>相同点<ul><li>都是循环遍历数组中的每一项，且只能遍历数组</li><li>forEach 和 map 方法里执行匿名函数都支持 3 个参数，参数分别是 item、index、arr(原数组)</li><li>匿名函数中的 this 指向 window</li></ul></li><li>不同点<ul><li>map 方法返回一个新的数组，数组为处理后的新数组</li><li>map 方法不会改变原始数组，不会对空数组进行检测</li><li>forEach()方法用于调用数组的每个元素，将元素传给回调函数，没有 return</li></ul></li></ul><hr><h3 id="this-指向问题"><a href="#this-指向问题" class="headerlink" title="this 指向问题"></a>this 指向问题</h3><ul><li>全局作用域下 this 指向 window</li><li>事件绑定函数中，this 指向函数调用者</li><li>立即执行函数(永远)和定时器中函数 this 指向 window</li><li>构造函数中的 this 指向当前的实例</li><li>call、apply、bind 可以改变函数的 this 指向</li><li>箭头函数没 this，this 为定义时所在作用域中的 this</li></ul><hr><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><ul><li>所有函数都有一个 prototype 属性，它是一个对象</li><li>prototype 属性对象中，带有一个 constructor 属性，其指向当前原型所属的类</li><li>所有的实例对象都有一个<strong>proto</strong>属性，该属性属性值指向当前实例所属类的原型</li></ul><hr><h3 id="如何解决回调地狱"><a href="#如何解决回调地狱" class="headerlink" title="如何解决回调地狱"></a>如何解决回调地狱</h3><ul><li>三种方案，promise、generator、async/await</li><li>常用 promise 方案：<ul><li>promise 是一个对象，用来传递异步操作的信息</li><li>有了这个对象，可以让异步操作以同步操作的流程来表达，避免层层嵌套的回调地狱</li><li>promise 有三个状态，pending、resolve、reject</li><li>一旦状态改变，就不会再变，从进行中变为已完成/失败，且 Promise 对象的状态不受外界影响</li><li>promise.all() 里面状态都改变，才会输出、promise.race() 里面只有一个状态变为 rejected 或 fulfilled 即输出、promis.finally()不管指定不管 Promise 对象最后状态如何，都会执行的操作（本质上还是 then 方法的特例）</li><li>Promise 的三个缺点<ul><li>无法取消 Promise，一旦新建就会立即执行</li><li>如果不设置回调函数，Promise 内部抛出的错误，不会反映到外部</li><li>当处于 pending 状态时，无法得知目前进展到哪一个阶段</li></ul></li></ul></li></ul><hr><h3 id="前端事件流"><a href="#前端事件流" class="headerlink" title="前端事件流"></a>前端事件流</h3><ul><li>事件流描述的是从页面中接受事件的顺序：捕获阶段-目标阶段-冒泡阶段</li><li>addeventListener 最后的布尔值参数若是 true，表示在捕获阶段调用事件处理程序，false 则表示在冒泡阶段调用事件处理程序</li><li>事件捕获阶段：目标 div 在捕获阶段不会接受事件，也就是捕获阶段</li><li>目标阶段：事件在 div 发生并处理，但事件处理会被看出冒泡阶段的一部分</li><li>冒泡阶段：事件又传播回文档</li><li>阻止冒泡事件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">event.stopPropagation();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e &amp;&amp; e.stopPropagation) &#123;</span><br><span class="line">    e.stopPropagation();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.event.cancelBubble = <span class="literal">true</span>; <span class="comment">//IE 方式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>阻止默认行为</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopDefault</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (e &amp;&amp; e.preventDefault) &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">window</span>.event.returnValue = <span class="literal">false</span>; <span class="comment">//IE 方式</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="事件如何先捕获后冒泡"><a href="#事件如何先捕获后冒泡" class="headerlink" title="事件如何先捕获后冒泡"></a>事件如何先捕获后冒泡</h3><ul><li>在 DOM 标准事件模型中，是先捕获后冒泡，但要实现这效果，对于同一个事件来讲，要先监听捕获和冒泡，分别对应相应的处理函数，监听到捕获事件，先暂缓执行，直到冒泡事件被捕获后再执行捕获事件</li><li>哪些事件不支持冒泡事件：<ul><li>鼠标事件：mouserleave、mouseenter</li><li>焦点事件：blur、focus</li><li>UI 事件：scroll、resize</li></ul></li></ul><hr><h3 id="如何判断一个变量是对象还是数组-prototype-toString-call"><a href="#如何判断一个变量是对象还是数组-prototype-toString-call" class="headerlink" title="如何判断一个变量是对象还是数组(prototype.toString.call())"></a>如何判断一个变量是对象还是数组(prototype.toString.call())</h3><ul><li>instanceOf() 判断 a 是否为 b 的实例，检查的是原型</li><li>toString() Object 的原型方法，对于 Object 对象，直接调用 toString() 就能返回[Object Object]，对于其他对象，则需要通过 call/apply 来调用才能返回正确类型的信息</li><li>hasOwnProperty()方法返回一个布尔值，指示对象自身属性中是否具有指定的属性，该方法会忽略掉那些从原型链上继承到的属性</li><li>isProperty()方法测试一个对象是否存在另一个对象的原型链上</li></ul><hr><h3 id="setTimeout-和-setInterval-的机制"><a href="#setTimeout-和-setInterval-的机制" class="headerlink" title="setTimeout 和 setInterval 的机制"></a>setTimeout 和 setInterval 的机制</h3><ul><li>将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间。如果到了，就执行对应代码，如果不到，就等到下一轮 Event Loop 时再重新判断</li></ul><hr><h3 id="splice-和-slice、map-和-forEach、filter-、reduce-的区别"><a href="#splice-和-slice、map-和-forEach、filter-、reduce-的区别" class="headerlink" title="splice 和 slice、map 和 forEach、filter()、reduce()的区别"></a>splice 和 slice、map 和 forEach、filter()、reduce()的区别</h3><ul><li>slice(start,end)：该方法可以从已有数组中返回选定的元素，返回一个新数组，包含从 start 到 end 的数组方法</li><li>splice：该方法从数组中添加/删除项目，返回被删除的项目</li><li>map：返回一个全新的数组，使用于改变数据值的时候</li><li>forEach：遍历数据，不返回也不改变数据，允许 callback 更改原始数组的元素</li><li>reduce：方法接收一个函数作为累加器，数组中每一个值开始缩减，最终计算一个值，不改变原数组</li><li>filter：方法创建一个新数组，新数组中的元素通过检查指定数组中符合条件的所有元素</li></ul><hr><h3 id="Ajax-的使用"><a href="#Ajax-的使用" class="headerlink" title="Ajax 的使用"></a>Ajax 的使用</h3><ul><li>Ajax 请求的五个步骤：<ul><li>创建 XMLHTTPRequest 对象</li><li>使用 open 方法创建 http 请求，并设置请求地址(xhr.open(get/post,url,async,true(同步),false(异步)))</li><li>设置发送的数据，用 send 发送请求</li><li>注册事件</li><li>获取响应并更新页面</li></ul></li></ul><hr><h3 id="如何判断一个数据是-NaN"><a href="#如何判断一个数据是-NaN" class="headerlink" title="如何判断一个数据是 NaN"></a>如何判断一个数据是 NaN</h3><ul><li>利用 NaN 的定义，先用 typeof 判断是否为 number 类型，再判断是否满足 isNaN</li><li>利用 NaN 是唯一不等于任何自身的特点 NaN !== NaN</li><li>利用 ES6 的 Object.is()方法[判断两个值是否相等] n == NaN</li></ul><hr><h3 id="let、var、const-的区别"><a href="#let、var、const-的区别" class="headerlink" title="let、var、const 的区别"></a>let、var、const 的区别</h3><ul><li>var 声明的变量会挂载在 window 上，而 let 和 const 声明的变量不会</li><li>var 声明的变量存在变量提升，let 和 const 不存在变量提升</li><li>let 和 const 声明会形成块级作用域</li><li>同一作用域下，var 可以声明同名变量，let 和 const 不可以</li><li>const 一旦声明必须赋值，不能用 null 占位，声明后不能再修改(复合类型可以修改属性)</li></ul><hr><h3 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h3><ul><li>面向对象是将功能等通过对象来实现，将功能封装进对象之中，让对象去实现具体的细节，这种思想是将数据作为首位，是对数据的一种优化，简化了过程</li><li>面向对象三大特点：封装、继承、多态(父类或接口定义的引用变量可以指向子类或具体实现类的实例对象)</li></ul><hr><h3 id="普通函数和构造函数的区别"><a href="#普通函数和构造函数的区别" class="headerlink" title="普通函数和构造函数的区别"></a>普通函数和构造函数的区别</h3><ul><li>构造函数习惯在首字母上大写</li><li>调用方式不一样，普通函数直接调用，构造函数要用关键字 new 来调用</li><li>调用时，构造函数内部会创建一个新对象，普通函数不会创建新对象</li><li>构造函数内部的 this 指向实例，普通函数内部的 this 指向调用函数的对象</li><li>构造函数默认返回值是实例，普通函数返回值由 return 决定</li></ul><hr><h3 id="简述-async-的用法"><a href="#简述-async-的用法" class="headerlink" title="简述 async 的用法"></a>简述 async 的用法</h3><ul><li>async 就是 generation 和 promise 的语法糖，async 就是将 generator 的*换成 async，将 yiled 换成 await</li><li>函数前加 async，异步操作方法前加 await 关键字，意思是执行完后再继续走，注：await 只能在 async 函数中运行</li><li>promise 如果返回的是一个错误的结果，如果没有做异常处理就会报错，所以用 try..catch 捕获异常就可以了</li></ul><hr><h3 id="jsonp-为什么不是真正的-ajax"><a href="#jsonp-为什么不是真正的-ajax" class="headerlink" title="jsonp 为什么不是真正的 ajax"></a>jsonp 为什么不是真正的 ajax</h3><ul><li>ajax 和 jsonp 在调用方式上很像，目的都是请求一个 url，然后把服务器返回的数据进行处理</li><li>ajax 是通过 XmlHttpRequest 获取本页的内容，jsonp 核心是动态添加 script 标签来调用服务器提供的 js 脚本</li><li>ajax 通过服务端代理一样可以实现跨域，jsonp 本身也不排斥同域的数据获取</li><li>jsonp 和 ajax 一样是一种方式，不一定非要 json 格式来传递数据，也可以用字符换，只是不利于 jsonp 提供公开服务</li></ul><hr><h3 id="为什么-js-是弱类型语言"><a href="#为什么-js-是弱类型语言" class="headerlink" title="为什么 js 是弱类型语言"></a>为什么 js 是弱类型语言</h3><ul><li>强类型语言中，变量有多种类型，不同类型相互转换时，有时需要强制转换</li><li>js 只有一种类型 var，给变量赋值时，会自动判断类型并转换，所以是弱类型</li></ul><hr><h3 id="for-循环和-map-循环的区别"><a href="#for-循环和-map-循环的区别" class="headerlink" title="for 循环和 map 循环的区别"></a>for 循环和 map 循环的区别</h3><ul><li>for 遍历对象自身和继承可枚举的属性，包括那些原型链上的属性</li><li>map 方法不会对空数组进行检查，map 会返回一个新数组，不对原数组产生影响</li></ul><hr><h3 id="创建类的三种方式"><a href="#创建类的三种方式" class="headerlink" title="创建类的三种方式"></a>创建类的三种方式</h3><ul><li>使用 function 和 this 关键字</li><li>原型方法，用 prototype 和 this 关键字</li><li>使用 object.create()方法构造</li></ul><hr><h3 id="继承的六种方式"><a href="#继承的六种方式" class="headerlink" title="继承的六种方式"></a>继承的六种方式</h3><ul><li>原型继承、构造函数继承、组合继承、原型式继承、寄生式继承、组合式继承</li></ul><hr><h3 id="同步与异步的区别-阻塞与非阻塞的区别"><a href="#同步与异步的区别-阻塞与非阻塞的区别" class="headerlink" title="同步与异步的区别/阻塞与非阻塞的区别"></a>同步与异步的区别/阻塞与非阻塞的区别</h3><ul><li>同步和异步关注的是消息通信机制<ul><li>同步：在发出一个调用时，在没有得到结果前，该调用不返回，但一旦调用返回，就得到返回值</li><li>异步：调用在发出之后，调用直接返回，没有返回结果，在调用发出后，被调用者通过状态、通知来通知调用者，或通过回调函数处理这个调用</li></ul></li><li>阻塞与非阻塞关注的是程序在等待调用结果时的状态<ul><li>阻塞：指调用结果返回之前，当前线程会被挂起，调用线程只有在得到结果之后才会返回</li><li>非阻塞调用指在不能立即得到结果前，该调用不会阻塞当前线程</li></ul></li></ul><hr><h3 id="重绘和回流是什么"><a href="#重绘和回流是什么" class="headerlink" title="重绘和回流是什么"></a>重绘和回流是什么</h3><ul><li>重绘：渲染树的一些元素需要更新属性，而这些属性只是影响元素外观，不影响布局，这就叫重绘</li><li>回流：渲染树中的一部分或全部因元素的规模尺寸、布局、隐藏等改变而需要重新构建，这就叫回流</li></ul><hr><h3 id="什么是-js-内存泄漏"><a href="#什么是-js-内存泄漏" class="headerlink" title="什么是 js 内存泄漏"></a>什么是 js 内存泄漏</h3><ul><li>内存泄漏是指一块被分配的内存即不能使用也不能回收，直到浏览器进程结束</li><li>释放内存的方法：赋值为 null</li></ul><hr><h3 id="如何转化类型"><a href="#如何转化类型" class="headerlink" title="如何转化类型"></a>如何转化类型</h3><ul><li>转数组 parseFloat()</li><li>转字符串 toString()/string()</li><li>数组转字符串 join()</li><li>字符串转数组 split()</li></ul><hr><h3 id="this-在-js-中起的作用"><a href="#this-在-js-中起的作用" class="headerlink" title="this 在 js 中起的作用"></a>this 在 js 中起的作用</h3><ul><li>js 中的 this 一般取决于调用这个函数的方法</li><li>如果函数被实例化，this 指向全新的对象</li><li>如果是某标签触发什么事件，调用了这个函数，this 指向标签</li><li>如果函数使用了 call/apply/bind，this 是作为参数传入对象</li><li>this 指向不明确的时候，this 会指向 window，ES6 的箭头函数修改了 this 指向，永远指向作用域</li></ul><hr><h3 id="如何准确判断一个变量是否为数组类型"><a href="#如何准确判断一个变量是否为数组类型" class="headerlink" title="如何准确判断一个变量是否为数组类型"></a>如何准确判断一个变量是否为数组类型</h3><ul><li>instanceof 用于判断引用类型属于哪个构造函数的方法(弊端：在一条原型链出现的，都会返回 true)</li><li>利用隐式原型的 constructor 属性判断构造函数是否为 Array</li></ul><hr><h3 id="继承的方法有哪些"><a href="#继承的方法有哪些" class="headerlink" title="继承的方法有哪些"></a>继承的方法有哪些</h3><ul><li>原型链继承、构造继承、实例继承、拷贝继承、组合继承、寄生组合继承</li></ul><hr><h3 id="js-延迟加载的方法有哪些"><a href="#js-延迟加载的方法有哪些" class="headerlink" title="js 延迟加载的方法有哪些"></a>js 延迟加载的方法有哪些</h3><ul><li>defer 和 async、动态创建 DOM 方式，按需异步载入 JS</li><li>defer 属性：script 标签定义了 defer 属性，用途：表明脚本在执行时不会影响页面的构造，即脚本会被延迟到整个页面解析完毕之后再执行</li><li>async 属性，script 标签定义了 async 属性，用途：不让页面等待脚本下载和执行，从而异步加载页面其他内容，异步脚本一定会在页面 load 事件前执行，不保证脚本会按顺序执行</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS的数组方法</title>
      <link href="/2022/01/01/JS%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/"/>
      <url>/2022/01/01/JS%E7%9A%84%E6%95%B0%E7%BB%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ul><li><p>使用数组字面量方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">let</span> arr3 = [<span class="string">&quot;xixi&quot;</span>, <span class="string">&quot;haha&quot;</span>];</span><br></pre></td></tr></table></figure></li><li><p>使用 Array 构造函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">&quot;xixi&quot;</span>, <span class="string">&quot;haha&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p><code>join()</code>方法用于把数组中的所有元素转换一个字符串，默认使用逗号作为分隔符 （原数组不改变）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.join()); <span class="comment">// 默认使用逗号  1,2,3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1.join(<span class="string">&quot;-&quot;</span>)); <span class="comment">// 1-2-3</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//[1,2,3] 原数组不改变</span></span><br></pre></td></tr></table></figure><hr><h4 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h4><p><code>push()</code>方法从数组末尾向数组添加元素，可以添加一个或多个元素,并返回新的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> count = arr1.push(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//返回添加到数组后的新长度  6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1,2,3,4,5,6]</span></span><br></pre></td></tr></table></figure><hr><h4 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h4><p><code>pop()</code>方法用于删除数组的最后一个元素并返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> item = arr1.pop();</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">//返回删除的元素 4</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1,2,3]</span></span><br></pre></td></tr></table></figure><hr><h4 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h4><p><code>unshift()</code>方法可向数组的开头添加一个或更多元素，并返回新的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> count = arr1.unshift(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(count); <span class="comment">//返回新的长度 6</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [0,1,2,3,4,5]</span></span><br></pre></td></tr></table></figure><p>####shift()</p><p><code>shift()</code>方法用于把数组的第一个元素从中删除，并返回第一个元素的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> item = arr1.item();</span><br><span class="line"><span class="built_in">console</span>.log(item); <span class="comment">//返回删除的值 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [2,3,4,5]sort()</span></span><br></pre></td></tr></table></figure><h4 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h4><p><code>sort()</code>用于对数组的元素进行排序。排序顺序可以是字母或数字，并按升序或降序，默认排序顺序为按字母升序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;b&quot;</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.sort()); <span class="comment">// [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><p><strong>比较函数格式：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) &#123;</span><br><span class="line">    <span class="comment">// 按某种排序标准进行比较, a 小于 b</span></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// a must be equal to b</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>举例：</p><p>按数字大小排序：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 10, 20]</span></span><br></pre></td></tr></table></figure><p>倒序排序，把大的数放前面:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x &lt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [20, 10, 2, 1]</span></span><br></pre></td></tr></table></figure><hr><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h4><p><code>reverse()</code>用于颠倒数组中元素的顺序 （原数组不变）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">17</span>, <span class="number">21</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">8</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr1.reverse()); <span class="comment">// [8,5,3,21,17]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [17,21,3,5,8] 原数组不变</span></span><br></pre></td></tr></table></figure><hr><h4 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h4><p><code>concat()</code>用于连接两个或多个数组，该方法不会改变现有的数组，而仅仅会返回被连接数组的一个副本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arrCopy = arr1.concat(arr2);</span><br><span class="line"><span class="built_in">console</span>.log(arrCopy); <span class="comment">//会返回被连接数组的一个副本 [1,3,5,7,8,2,4,5]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">//原数组不改变 [1,3,5,7,8]</span></span><br></pre></td></tr></table></figure><hr><h4 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h4><p><code>slice()</code>方法 （截取） 返回从原数组中指定开始下标到结束下标之间的项组成的新数组，可以接受一或两个参数，即要返回项的起始和结束位置(<code>不包括结束位置的项</code>) 原数组不变</p><p><code>如果是负数就是从末尾开始，最后一个就是-1</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>];</span><br><span class="line"><span class="keyword">let</span> arrCopy = arr1.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">let</span> arrCopy2 = arr1.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="keyword">let</span> arrCopy3 = arr1.slice(<span class="number">1</span>, -<span class="number">2</span>); <span class="comment">// 相当于arr1.slice(1,4);</span></span><br><span class="line"><span class="keyword">let</span> arrCopy4 = arr1.slice(-<span class="number">4</span>, -<span class="number">1</span>); <span class="comment">// 相当于arr1.slice(2,5);</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1,3,5,7,9,11](原数组没变)</span></span><br><span class="line"><span class="built_in">console</span>.log(arrCopy); <span class="comment">// [3,5,7,9,11]</span></span><br><span class="line"><span class="built_in">console</span>.log(arrCopy2); <span class="comment">// [3,5,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arrCopy3); <span class="comment">// [3,5,7]</span></span><br><span class="line"><span class="built_in">console</span>.log(arrCopy4); <span class="comment">// [5,7,9]</span></span><br></pre></td></tr></table></figure><hr><h4 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h4><p><code>splice()</code>可以实现删除、插入和替换</p><p>**注意：<code>**splice()</code> 方法会<code>改变原始数组</code></p><h5 id="删除元素，并返回删除的元素，接收-2-个参数：起始位置、要删除的项数"><a href="#删除元素，并返回删除的元素，接收-2-个参数：起始位置、要删除的项数" class="headerlink" title="删除元素，并返回删除的元素，接收 2 个参数：起始位置、要删除的项数"></a>删除元素，并返回删除的元素，接收 2 个参数：起始位置、要删除的项数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">let</span> arrRemoved = arr1.splice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [1,7,9,11]</span></span><br><span class="line"><span class="built_in">console</span>.log(arrRemoved); <span class="comment">// [3,5]</span></span><br></pre></td></tr></table></figure><h5 id="插入元素-，返回一个空数组-接收-3-个参数：起始位置、0-、要插入的项"><a href="#插入元素-，返回一个空数组-接收-3-个参数：起始位置、0-、要插入的项" class="headerlink" title="插入元素 ，返回一个空数组, 接收 3 个参数：起始位置、0 、要插入的项"></a>插入元素 ，返回一个空数组, 接收 3 个参数：起始位置、0 、要插入的项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">let</span> change = arr1.splice(<span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [10,5,6,7,20,30,40]</span></span><br><span class="line"><span class="built_in">console</span>.log(change); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><h5 id="替换元素，返回删除的内容，接受-3-个参数：起始位置、-删除的项数-、要替换的项"><a href="#替换元素，返回删除的内容，接受-3-个参数：起始位置、-删除的项数-、要替换的项" class="headerlink" title="替换元素，返回删除的内容，接受 3 个参数：起始位置、(删除的项数)、要替换的项"></a>替换元素，返回删除的内容，接受 3 个参数：起始位置、(删除的项数)、要替换的项</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">80</span>];</span><br><span class="line"><span class="keyword">let</span> change = arr1.splice(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [10,5,6,7,50,60,70,80]</span></span><br><span class="line"><span class="built_in">console</span>.log(change); <span class="comment">// [20,30,40]</span></span><br></pre></td></tr></table></figure><hr><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h4><p><code>forEach()</code>用于调用数组的每个元素，并将元素传递给回调函数。</p><p>接受 3 个参数（<code>currentValue</code>(当前元素), <code>index</code>(当前元素的索引值) , <code>arr</code>(当前元素所属的数组对象)）</p><p><strong>注意:</strong> <code>forEach()</code> 对于空数组是不会执行回调函数的。</p><p><strong>注意:</strong> <code>forEach()</code> 适用于只是进行集合或数组遍历，for 则在较复杂的循环中效率更高。</p><p><code>forEach()</code> 不能对数组或集合进行修改（添加删除操作），如果想要修改就要用 for 循环。</p><p><strong>for 循环与 forEach 有什么区别？</strong></p><ul><li><p><code>for</code>循环可以使用 break 跳出循环，但 forEach 不能。</p></li><li><p><code>for</code>循环可以控制循环起点（i 初始化的数字决定循环的起点），<code>forEach</code>只能默认从索引<code>0</code>开始。</p></li><li><p><code>for</code>循环过程中支持修改索引（修改<code> i</code>），但<code>forEach</code>做不到（底层控制 index 自增，我们无法左右它）。</p></li></ul><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">forEach 语法：</span><br><span class="line"></span><br><span class="line">　[ ].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,array</span>)</span>&#123;</span><br><span class="line">　</span><br><span class="line">　　　　<span class="comment">//code something</span></span><br><span class="line">　　　　</span><br><span class="line">　　&#125;);</span><br></pre></td></tr></table></figure><hr><h4 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h4><p><code>indexOf()</code>：接收两个参数：要查找的项 、（可选的）表示查找起点位置的索引。 从数组的开头（位置 0）开始向后查找，<strong>找到就返回其第一个找到的下标, 找不到就返回 -1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">5</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="string">&quot;5&quot;</span>)); <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">6</span>, <span class="number">4</span>)); <span class="comment">// 6  从下标为4的开始找（2）然后找到的第一个6 下标为6</span></span><br></pre></td></tr></table></figure><hr><h4 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h4><p><code>lastIndexOf()</code>：接收两个参数：要查找的项 、（可选的）表示查找起点位置的索引。从数组的末尾开始向前查找</p><p><strong>找到就返回其第一个找到的下标, 找不到就返回 -1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">6</span>)) <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="string">&#x27;6&#x27;</span>))<span class="comment">// -1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.lastIndexOf(<span class="number">6</span>,<span class="number">4</span>)) <span class="comment">// 3  从下标为4的开始找（1）然后找到的第一个6 下标为3</span></span><br></pre></td></tr></table></figure><hr><p>####every()</p><p><code>every()</code> 用于判断数组中每一项都是否满足条件，只有所有项都满足条件，才会返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">10</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h4 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h4><p><code>some()</code>用于判断数组中是否存在满足条件的项，只要有一项满足条件，就会返回 true</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">letr arr2 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">3</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); 　　　　　　　　<span class="comment">//true</span></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> x &lt; <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr3); 　　　　　　　　<span class="comment">// false</span></span><br></pre></td></tr></table></figure><hr><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p><code>toString()</code>用于将数组转化成字符串 不修改原数组 ，不需要参数，返回值是一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="string">&quot;q&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;r&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> array1 = array.toString();</span><br><span class="line"><span class="built_in">console</span>.log(array1); <span class="comment">//q,w,e,r</span></span><br></pre></td></tr></table></figure><hr><h4 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h4><p><code>map()</code> :(映射) 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item * item;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">//[1, 4, 9, 16, 25]</span></span><br></pre></td></tr></table></figure><hr><h4 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h4><p><code>filter()</code>方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p>它接收 3 个参数：<code>currentValue</code>（当前元素的值）、<code>index</code>（当前元素的索引值）、<code>arr</code>（当前元素属于的数组对象）</p><p>语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue, indedx, arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><p>举例：</p><p><strong>过滤偶数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrList = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> arrListFilter = arrList.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> item % <span class="number">2</span> == <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arrListFilter); <span class="comment">//[0,2,4]</span></span><br></pre></td></tr></table></figure><p><strong>返回数组 arr 中所有大于 5 的元素</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> newArr = arr.filter(<span class="function">(<span class="params">item</span>) =&gt;</span> item &gt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">//9</span></span><br></pre></td></tr></table></figure><p><strong>数组去重</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> r = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">currentValue, index, self</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> self.indexOf(currentValue) == index;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(r); <span class="comment">// [9,2,3,1,0,5]</span></span><br></pre></td></tr></table></figure><p><strong>移除数组 arr 中的所有值与 item 相等的元素。不要直接修改数组 arr，结果返回新的数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">9</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">arr, item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arr.filter(<span class="function">(<span class="params">val</span>) =&gt;</span> val != item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在数组 arr 中，查找值与 item 相等的元素出现的所有位置</strong></p><blockquote><p>输入<br>[‘a’,’b’,’c’,’d’,’e’,’f’,’a’,’b’,’c’] ‘a’<br>输出<br>[0, 6]</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findAllOccurrences</span>(<span class="params">arr, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> res = [];</span><br><span class="line">  arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">ele, index</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ele === target &amp;&amp; res.push(index);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="Array-of-ES6-新增"><a href="#Array-of-ES6-新增" class="headerlink" title="Array.of() ES6 新增"></a>Array.of() ES6 新增</h4><p><code>Array.of</code>方法创建数组（ES6 新增:用于将一组值，转换为数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = <span class="built_in">Array</span>.of();</span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// []</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2.length); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = <span class="built_in">Array</span>.of(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr3.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3[<span class="number">0</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><hr><h4 id="Array-from-ES6-新增"><a href="#Array-from-ES6-新增" class="headerlink" title="Array.from() ES6 新增"></a>Array.from() ES6 新增</h4><p><code>Array.from</code>方法创建数组(ES6 新增:将一个类数组对象或者可遍历对象转换成一个真正的数组)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...args剩余参数数组，由传递给函数的实际参数提供</span></span><br><span class="line">  <span class="keyword">let</span> arg = <span class="built_in">Array</span>.from(args);</span><br><span class="line">  <span class="built_in">console</span>.log(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(arr1, <span class="number">26</span>, <span class="keyword">from</span>); <span class="comment">// [arr1,26,from]</span></span><br></pre></td></tr></table></figure><hr><h4 id="find-ES6-新增"><a href="#find-ES6-新增" class="headerlink" title="find() ES6 新增"></a>find() ES6 新增</h4><p><code>find()</code>方法返回通过测试（函数内判断）的数组的第一个元素的值。</p><p><code>find() </code>方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, <code>find() </code>返回符合条件的元素，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回<code> undefined</code></li></ul><p><strong>注意:</strong> <code>find()</code> 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> <code>find()</code> 并没有改变数组的原始值。</p><p>它接收 3 个参数：<code>currentValue</code>（当前元素的值）、<code>index</code>（当前元素的索引值）、<code>arr</code>（当前元素属于的数组对象）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found1 = array1.find(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> found2 = array1.find(<span class="function">(<span class="params">element</span>) =&gt;</span> element &lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(found1); <span class="comment">//返回的是满足条件的第一个元素  12</span></span><br><span class="line"><span class="built_in">console</span>.log(found2); <span class="comment">//没有符合条件的元素返回undefined</span></span><br></pre></td></tr></table></figure><hr><h4 id="findIndex-ES6-新增"><a href="#findIndex-ES6-新增" class="headerlink" title="findIndex() ES6 新增"></a>findIndex() ES6 新增</h4><p><code>findIndex()</code> 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置。</p><p><code>findIndex() </code>方法为数组中的每个元素都调用一次函数执行：</p><ul><li>当数组中的元素在测试条件时返回 <em>true</em> 时, <code>findIndex()</code> 返回符合条件的元素的索引位置，之后的值不会再调用执行函数。</li><li>如果没有符合条件的元素返回<code> -1</code></li></ul><p><strong>注意:</strong> <code>findIndex()</code> 对于空数组，函数是不会执行的。</p><p><strong>注意:</strong> <code>findIndex()</code> 并没有改变数组的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">const</span> found1 = array1.findIndex(<span class="function">(<span class="params">element</span>) =&gt;</span> element &gt; <span class="number">10</span>);</span><br><span class="line"><span class="keyword">const</span> found2 = array1.findIndex(<span class="function">(<span class="params">element</span>) =&gt;</span> element &lt; <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(found1); <span class="comment">//返回的是满足条件的第一个元素的索引  1</span></span><br><span class="line"><span class="built_in">console</span>.log(found2); <span class="comment">//没有符合条件的元素返回 -1</span></span><br></pre></td></tr></table></figure><hr><h4 id="fill-ES6-新增"><a href="#fill-ES6-新增" class="headerlink" title="fill() ES6 新增"></a>fill() ES6 新增</h4><p><code>fill()</code> 方法用于将一个固定值替换数组的元素。</p><p>接收 3 个参数：<code>value</code>(填充的值)、<code>start</code>(开始填充位置)、<code>end</code>(停止填充位置 默认为 <em>array</em>.length)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits1 = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits1.fill(<span class="string">&quot;Runoob&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits1); <span class="comment">//Runoob,Runoob,Runoob,Runoob</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fruits2 = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits2.fill(<span class="string">&quot;Runoob&quot;</span>, <span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(fruits2); <span class="comment">//Banana,Orange,Runoob,Runoob</span></span><br></pre></td></tr></table></figure><hr><h4 id="entries-ES6-新增"><a href="#entries-ES6-新增" class="headerlink" title="entries() ES6 新增"></a>entries() ES6 新增</h4><p><code>entries() </code>方法返回一个数组的迭代对象，该对象包含数组的键值对 (key/value)。</p><p>迭代对象中数组的索引值作为 <code>key</code>， 数组元素作为 <code>value</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.entries();</span><br><span class="line"><span class="built_in">console</span>.log(fruits); <span class="comment">//[0, &quot;Banana&quot;][1, &quot;Orange&quot;][2, &quot;Apple&quot;][3, &quot;Mango&quot;]</span></span><br></pre></td></tr></table></figure><hr><h4 id="keys-ES6-新增"><a href="#keys-ES6-新增" class="headerlink" title="keys() ES6 新增"></a>keys() ES6 新增</h4><p><code>keys() </code>方法用于从数组创建一个包含数组键的可迭代对象。</p><p>如果对象是数组返回 <code>true</code>，否则返回 <code>false</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = array1.keys();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// expected output: 0</span></span><br><span class="line"><span class="comment">// expected output: 1</span></span><br><span class="line"><span class="comment">// expected output: 2</span></span><br></pre></td></tr></table></figure><hr><h4 id="values-ES6-新增"><a href="#values-ES6-新增" class="headerlink" title="values() ES6 新增"></a>values() ES6 新增</h4><p><code>values()</code> 方法返回一个新的 <code>Array Iterator</code>对象，该对象包含数组每个索引的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> iterator = array1.values();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> value <span class="keyword">of</span> iterator) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output: &quot;a&quot;</span></span><br><span class="line"><span class="comment">// expected output: &quot;b&quot;</span></span><br><span class="line"><span class="comment">// expected output: &quot;c&quot;</span></span><br></pre></td></tr></table></figure><hr><h4 id="flat-ES6-新增"><a href="#flat-ES6-新增" class="headerlink" title="flat() ES6 新增"></a>flat() ES6 新增</h4><p><code>flat()</code>用于将嵌套的数组“拉平”，变成一维数组。该方法返回一个新数组，对原数据没有影响。</p><p><code>flat()</code>默认只会“拉平”一层,会跳过空位。</p><p>如果不管有多少层嵌套，都要转成一维数组，可以用<code>Infinity</code>关键字作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()  <span class="comment">// flat()默认只会“拉平”一层,会跳过空位。</span></span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat() <span class="comment">// flat()默认只会“拉平”一层,会跳过空位</span></span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><hr><h4 id="flatMap-ES6-新增"><a href="#flatMap-ES6-新增" class="headerlink" title="flatMap() ES6 新增"></a>flatMap() ES6 新增</h4><p><code>flatMap()</code> 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。</p><p>它接收 3 个参数：<code>currentValue</code>（当前元素的值）、<code>index</code>（当前元素的索引值）、<code>arr</code>（当前元素属于的数组对象）</p><p>返回一个新的数组，其中每个元素都是回调函数的结果，并且结构深度 <code>depth</code> 值为 1。</p><p><code>map </code>与<code>flatMap</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">arr1.map(<span class="function">(<span class="params">x</span>) =&gt;</span> [x * <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span><br><span class="line">arr1.flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x * <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// [2, 4, 6, 8]</span></span><br><span class="line"><span class="comment">// 只会将 flatMap 中的函数返回的数组 “压平” 一层</span></span><br><span class="line">arr1.flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [[x * <span class="number">2</span>]]);</span><br><span class="line"><span class="comment">// [[2], [4], [6], [8]]</span></span><br></pre></td></tr></table></figure><hr><h4 id="includes-ES7-新增"><a href="#includes-ES7-新增" class="headerlink" title="includes() ES7 新增"></a>includes() ES7 新增</h4><p><code>includes()</code>方法返回一个布尔值，表示某个数组是否包含给定的值</p><p>接受 2 个参数：需要查找的元素值，第二个是(可选)开始查找元素的位置</p><p>如果第二个参数为负数，则表示倒数的位置，如果这时它大于数组长度（比如第二个参数为<code>-4</code>，但数组长度为<code>3</code>），则会重置为从<code>0</code>开始。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  .includes(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)].includes(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>)].includes(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br><span class="line">  [(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h4><p><code>reduce()</code> 方法对数组中的每个元素执行一个由您提供的<strong>reducer</strong>函数(升序执行)，将其结果汇总为单个返回值。</p><p>它接收 4 个参数：<code>accumulator</code>(累加器)、<code>currentValue</code>（当前元素的值）、<code>index</code>（当前元素的索引值）、<code>arr</code>（当前元素属于的数组对象）</p><p>返回函数累计处理的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initialValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = [&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;].reduce(<span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  accumulator,</span></span></span><br><span class="line"><span class="params"><span class="function">  currentValue</span></span></span><br><span class="line"><span class="params"><span class="function"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> accumulator + currentValue.x;</span><br><span class="line">&#125;,</span><br><span class="line">initialValue);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// logs 6</span></span><br></pre></td></tr></table></figure><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> JS </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Markdown？</title>
      <link href="/2022/01/01/%E4%BB%80%E4%B9%88%E6%98%AFMarkdown%EF%BC%9F/"/>
      <url>/2022/01/01/%E4%BB%80%E4%B9%88%E6%98%AFMarkdown%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-Markdown？"><a href="#什么是-Markdown？" class="headerlink" title="什么是 Markdown？"></a>什么是 Markdown？</h2><p>Markdown 是一种轻量级标记语言，具有纯文本格式语法，可用于网页展示，便于排版。<br>Markdown 编写的文档可以导出 HTML 、Word、图像、PDF、Epub 等多种格式的文档。<br>Markdown 编写的文档后缀为 .md, .markdown。</p><hr><h2 id="Markdown-的基本使用"><a href="#Markdown-的基本使用" class="headerlink" title="Markdown 的基本使用"></a>Markdown 的基本使用</h2><h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>使用 # 号可表示 1-6 级标题，一级标题对应一个 # 号，二级标题对应两个 # 号，以此类推。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/multiplystar/images/img/title.png"></p><hr><h3 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h3><h4 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h4><p>要加粗的文字左右分别用两个*号包起来</p><h4 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h4><p>要倾斜的文字左右分别用一个*号包起来</p><h4 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h4><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><h4 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h4><p>要加删除线的文字左右分别用两个~~号包起来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">**这是加粗的字体**</span><br><span class="line"></span><br><span class="line">*这是倾斜的字体*</span><br><span class="line"></span><br><span class="line">***这是倾斜加粗的字体***</span><br><span class="line"></span><br><span class="line">~~这是加上删除线的字体~~</span><br></pre></td></tr></table></figure><p>效果如下：<br><strong>这是加粗的字体</strong></p><p><em>这是倾斜的字体</em></p><p><strong><em>这是倾斜加粗的字体</em></strong></p><p><del>这是加上删除线的字体</del></p><hr><h3 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h3><p>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西<br>你也可以在星号或是减号中间插入空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">---</span><br><span class="line">- - - -</span><br><span class="line">***</span><br><span class="line">_ _ _</span><br></pre></td></tr></table></figure><p>效果如下：(我的是加了美化的)</p><hr><hr><hr><hr><hr><h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>你只需要在你希望引用的文字前面加上 &gt; 就好了<br>引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">&gt;谦以待人，虚以接物。——鲁迅</span><br><span class="line">&gt;&gt;人生得一知己足矣，斯世当以同怀视之。——鲁迅</span><br><span class="line">&gt;&gt;&gt;有些人死了，但他还活着；有些人活着，但他已经死了。——鲁迅</span><br></pre></td></tr></table></figure><p>效果如下:</p><blockquote><p>谦以待人，虚以接物。——鲁迅</p><blockquote><p>人生得一知己足矣，斯世当以同怀视之。——鲁迅</p><blockquote><p>有些人死了，但他还活着；有些人活着，但他已经死了。——鲁迅</p></blockquote></blockquote></blockquote><hr><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">![alt 属性文本](图片地址)</span><br><span class="line"></span><br><span class="line">![alt 属性文本](图片地址 &quot;可选标题&quot;)</span><br></pre></td></tr></table></figure><p>开头一个感叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 ‘title’ 属性的文字。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">![头像](/images/example.jpg) //本地导入</span><br><span class="line"></span><br><span class="line">![图片](https://img1.baidu.com/it/u=2637385224,354057412&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg) //网络导入</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/multiplystar/images/img/example.jpg"></p><p><a href="https://img1.baidu.com/it/u=2637385224,354057412&fm=26&fmt=auto&gp=0.jpg"><img src="https://img1.baidu.com/it/u=2637385224,354057412&fm=26&fmt=auto&gp=0.jpg" alt="图片"></a></p><hr><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">[链接名称](链接地址)</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">&lt;链接地址&gt;</span><br></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">这是一个链接 [百度](https://www.baidu.com)</span><br><span class="line">&lt;https://www.baidu.com&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br>这是一个链接 <a href="https://www.baidu.com/">百度</a><br><a href="https://www.baidu.com/">https://www.baidu.com</a></p><hr><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>单行代码：可以用反引号把它包起来（`）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">`这是单行代码`</span><br></pre></td></tr></table></figure><p>效果如下:<br><code>这是单行代码</code></p><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">``` javascript</span><br><span class="line">function say()&#123;</span><br><span class="line">    alert(&#x27;Hello World!&#x27;)</span><br><span class="line">&#125;</span><br><span class="line">```</span><br></pre></td></tr></table></figure><p>效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVASCRIPT</span><br><span class="line">function say()&#123;</span><br><span class="line">    alert(&#x27;Hello World!&#x27;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p>无序列表使用星号(*)、加号(+)或是减号(-)作为列表标记，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">- 列表内容1</span><br><span class="line">- 列表内容2</span><br><span class="line"></span><br><span class="line">+ 列表内容1</span><br><span class="line">+ 列表内容2</span><br><span class="line"></span><br><span class="line">* 列表内容1</span><br><span class="line">* 列表内容2</span><br></pre></td></tr></table></figure><p>效果如下：</p><ul><li><p>列表内容 1</p></li><li><p>列表内容 2</p></li><li><p>列表内容 1</p></li><li><p>列表内容 2</p></li><li><p>列表内容 1</p></li><li><p>列表内容 2</p></li></ul><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p>使用数字并加上 . 号来表示，这些标记后面要添加一个空格，然后再填写内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">1. 第一项</span><br><span class="line">2. 第二项</span><br><span class="line">3. 第三项</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol><h4 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h4><p>列表嵌套只需在子列表中的选项前面添加四个空格即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">1. 第一项：</span><br><span class="line">    - 第一项嵌套的第一个元素</span><br><span class="line">    - 第一项嵌套的第二个元素</span><br><span class="line">2. 第二项：</span><br><span class="line">    - 第二项嵌套的第一个元素</span><br><span class="line">    - 第二项嵌套的第二个元素</span><br></pre></td></tr></table></figure><p>效果如下：</p><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><hr><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">|  表头   | 表头   |</span><br><span class="line">|  ----   | ----  |</span><br><span class="line">| 单元格  | 单元格 |</span><br><span class="line">| 单元格  | 单元格 |</span><br></pre></td></tr></table></figure><p>效果如下：<br><img src="https://cdn.jsdelivr.net/gh/multiplystar/images/img/biao1.png"></p><p>我们可以设置表格的对齐方式：</p><ul><li><p>-: 设置内容和标题栏居右对齐。</p></li><li><p>:- 设置内容和标题栏居左对齐。</p></li><li><p>:-: 设置内容和标题栏居中对齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MARKDOWN</span><br><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/multiplystar/images/img/biao2.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面试题</title>
      <link href="/2022/01/01/JS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/01/01/JS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="JS-的数据类型"><a href="#JS-的数据类型" class="headerlink" title="JS 的数据类型"></a>JS 的数据类型</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">值类型(基本类型)：字符串（<span class="built_in">String</span>）、数字(<span class="built_in">Number</span>)、布尔(<span class="built_in">Boolean</span>)、对空（Null）、未定义（Undefined）、<span class="built_in">Symbol</span>。</span><br><span class="line"></span><br><span class="line">引用数据类型：对象(<span class="built_in">Object</span>)、数组(<span class="built_in">Array</span>)、函数(<span class="built_in">Function</span>)。</span><br></pre></td></tr></table></figure><hr><h3 id="延迟加载-JS-有哪些方式"><a href="#延迟加载-JS-有哪些方式" class="headerlink" title="延迟加载 JS 有哪些方式"></a>延迟加载 JS 有哪些方式</h3><hr><h3 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h3><p>null 表示没有对象，即该处不应该有值</p><ul><li><p>作为函数的参数，表示该函数的参数不是对象</p></li><li><p>作为对象原型链的终点</p></li></ul><p>undefined 表示缺少值，即此处应该有值，但没有定义</p><ul><li><p>定义了形参，没有传实参，显示 undefined</p></li><li><p>对象属性名不存在时，显示 undefined</p></li><li><p>函数没有写返回值，即没有写 return，拿到的是 undefined</p></li><li><p>写了 return，但没有赋值，拿到的是 undefined</p></li></ul><p>null 和 undefined 转换成 number 数据类型</p><ul><li><p>null 默认转成 0</p></li><li><p>undefined 默认转成 NaN</p></li></ul><hr><h3 id="和-有什么不同"><a href="#和-有什么不同" class="headerlink" title="==和===有什么不同"></a>==和===有什么不同</h3><hr><h3 id="JS-微任务和宏任务"><a href="#JS-微任务和宏任务" class="headerlink" title="JS 微任务和宏任务"></a>JS 微任务和宏任务</h3><p><strong>微任务</strong>：</p><ul><li>promise.then()</li></ul><p><strong>宏任务</strong>：</p><ul><li><p>script（整体代码）</p></li><li><p>setTimeout</p></li><li><p>setInterval</p></li><li><p>事件</p><p><strong>执行流程</strong>:</p></li></ul><p>执行宏任务前，要保证所有的微任务是清空的</p><p>先执行微任务，等待所有的微任务都清空了再去执行宏任务</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">考题：</span><br><span class="line">输出什么</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>*i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//相当于 for(var i=0;i&lt;3;i++)&#123;&#125;   i=0</span></span><br><span class="line"><span class="comment">//for(var i=0;i&lt;3;i++)&#123;&#125;   i=1</span></span><br><span class="line"><span class="comment">//for(var i=0;i&lt;3;i++)&#123;&#125;   i=2   执行完之后 i++  i就等于3</span></span><br><span class="line"><span class="comment">//再执行定时器里面的</span></span><br><span class="line"><span class="comment">/**setTimeout(function()&#123;</span></span><br><span class="line"><span class="comment">        console.log(i);  此时i=3</span></span><br><span class="line"><span class="comment">    &#125;,1000*i)  //这里的i=0</span></span><br><span class="line"><span class="comment">setTimeout(function()&#123;</span></span><br><span class="line"><span class="comment">        console.log(i); 此时i=3</span></span><br><span class="line"><span class="comment">    &#125;,1000*i)  //这里的i=1</span></span><br><span class="line"><span class="comment">setTimeout(function()&#123;</span></span><br><span class="line"><span class="comment">        console.log(i); 此时i=3</span></span><br><span class="line"><span class="comment">    &#125;,1000*i)  //这里的i=2</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;内层宏事件3&quot;</span>); <span class="comment">//等微任务的执行完了在执行宏任务</span></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;外层宏事件1&quot;</span>); <span class="comment">// 这个属于同步 ==》执行栈</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;外层宏事件2&quot;</span>); <span class="comment">//这个也属于同步</span></span><br><span class="line">  resolve();</span><br><span class="line">&#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;微事件1&quot;</span>); <span class="comment">//.then方法里的属于微任务</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;微事件2&quot;</span>);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><hr><h3 id="JS-数据类型考题"><a href="#JS-数据类型考题" class="headerlink" title="JS 数据类型考题"></a>JS 数据类型考题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="literal">NaN</span>); <span class="comment">//number</span></span><br><span class="line">alert(typrof(<span class="literal">undefined</span>)); <span class="comment">//undefined</span></span><br><span class="line">alert(<span class="keyword">typeof</span> <span class="literal">null</span>); <span class="comment">//object</span></span><br><span class="line">alert(<span class="literal">true</span> + <span class="number">1</span>); <span class="comment">//2</span></span><br><span class="line">alert(<span class="string">&quot;name&quot;</span> + <span class="literal">true</span>); <span class="comment">//&#x27;nametrue&#x27;</span></span><br><span class="line">alert(<span class="literal">undefined</span> + <span class="number">1</span>); <span class="comment">//NaN</span></span><br></pre></td></tr></table></figure><hr><h3 id="JS-对象考题"><a href="#JS-对象考题" class="headerlink" title="JS 对象考题"></a>JS 对象考题</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  张三: <span class="number">1</span>, <span class="comment">//张三会被转换成字符串类型 &#x27;张三&#x27;</span></span><br><span class="line">  张三: <span class="number">100</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj[<span class="string">&quot;张三&quot;</span>], obj.张三); <span class="comment">// 100 ， 100 会覆盖</span></span><br><span class="line"><span class="comment">// var arr1 = [1,2,3,4,5];</span></span><br><span class="line"><span class="comment">//console.log(arr1.toString()); //1,2,3,4,5</span></span><br><span class="line"><span class="built_in">console</span>.log(obj.toString()); <span class="comment">//[object Object]</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;&#125;; <span class="comment">// var a =&#123;&#123;key:&#x27;a&#x27;&#125;:123, &#123;key:&#x27;c&#x27;&#125;:456&#125; =&gt; &#123;[object Object]:123, [object Object]:456&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">  <span class="comment">// 会自己执行=》console.log(b.toString()); =&gt;[object Object]</span></span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> c = &#123;</span><br><span class="line">  <span class="comment">// 会自己执行=》console.log(c.toString()); =&gt;[object Object]</span></span><br><span class="line">  <span class="attr">key</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line">a[b] = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">a[c] = <span class="string">&quot;456&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a[b]); <span class="comment">//</span></span><br></pre></td></tr></table></figure><p><strong>函数是对象</strong></p><p>属性查找：</p><ol><li>对象本身找</li><li>构造函数找</li><li>对象原型找</li><li>构造函数原型找</li><li>向上一级原型中查找 —》一直向上找 ， 直到找不到 | 找到为止 （原型链顶端是 null ，对象找不到属性是 undefined）</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">对象属性的查找规则</span><br><span class="line">function Fun()&#123;</span><br><span class="line">    this.name = &#x27;1&#x27;; //第二步</span><br><span class="line">&#125;</span><br><span class="line">Fun.prototype.name = &#x27;2&#x27;; //第四步</span><br><span class="line">let o = new Fun();</span><br><span class="line">o._proto_.name = &#x27;3&#x27;; //第三步</span><br><span class="line">o.name = &#x27;4&#x27;   //第一步</span><br><span class="line">console.log(o.name);// 先找对象本身有没有，没有就去函数中查找，还没有就去对象的原型上找，再没有找到去函数原型上找</span><br></pre></td></tr></table></figure><hr><h3 id="JS-作用域考题"><a href="#JS-作用域考题" class="headerlink" title="JS 作用域考题"></a>JS 作用域考题</h3><p><strong>规律：</strong></p><ul><li><p>作用域链<br>先在内部找，内部找不到再去外部找,不能外部向内查找</p></li><li><p>变量提升【悬挂声明】</p></li><li><p>优先级<br>变量声明 &gt; 声明函数【不看书写顺序】 &gt; 参数 &gt; 提升</p></li></ul><p><code>注意:</code></p><ul><li>windows.xxx 或者 xxx(前面没有 var、let、const)</li><li>除了函数外，其他的没有作用域(if、for、switch…)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var bar; 悬挂在最前面 这是变量提升</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">//undefined</span></span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">//function bar()&#123;return 1111&#125; 声明函数</span></span><br><span class="line">  <span class="keyword">var</span> bar = <span class="number">2</span>; <span class="comment">//声明了变量</span></span><br><span class="line">  <span class="built_in">console</span>.log(bar); <span class="comment">//2</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1111</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var name</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//因为在内部存在name这个变量所以name变量提升到最前面</span></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;Jack&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Goodbye&quot;</span> + name);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Hello&quot;</span> + name);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)(); <span class="comment">//&#x27;GoodbyeJack&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;ha&quot;</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//undefined  因为在函数内部会先找自己的作用域有没有a 而if没有作用域所以有a</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">//使a变量提升到最前面</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">  a = <span class="number">20</span>; <span class="comment">//window.a  属于全局的声明</span></span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">//报错</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">//var a;</span></span><br><span class="line">  a = <span class="number">20</span>; <span class="comment">//再次赋值</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">//20</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var a</span></span><br><span class="line">  a = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 0</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.a); <span class="comment">// 5  普通函数中的this 指代的是window</span></span><br><span class="line">  <span class="keyword">var</span> a;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 0</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="keyword">var</span> f = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">if</span> (f === <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">20</span>; <span class="comment">//函数有作用域 外部的不能向内查找</span></span><br><span class="line">  c = <span class="number">30</span>; <span class="comment">// 全局变量 window.c = 30</span></span><br><span class="line">&#125;</span><br><span class="line">fn();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// var i;</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><h3 id="JS-作用域-this-指向-原型-考题"><a href="#JS-作用域-this-指向-原型-考题" class="headerlink" title="JS 作用域+this 指向+原型 考题"></a>JS 作用域+this 指向+原型 考题</h3><hr><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>无意的现象（不是作者刻意设计的）</p><ul><li>是什么？</li></ul><p>闭包说的通俗一点就是打通了一条在函数外部访问函数内部作用域的通道。正常情况下函数外部是访问不到函数内部作用域变量的，</p><p>表象判断是不是闭包:函数嵌套函数,内部函数被 return 内部函数调用外层函数的局部变量</p><ul><li><p>优点：可以隔离作用域，不造成全局污染</p></li><li><p>缺点：由于闭包长期驻留内存，则长期这样会导致内存泄露</p></li><li><p>如何解决内存泄露：将暴露全外部的闭包变量置为 null</p></li><li><p>适用场景：封装组件，for 循环和定时器结合使用,for 循环和 dom 事件结合.可以在性能优化的过程中,节流防抖函数的使用,导航栏获取下标的使用</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"> <span class="keyword">var</span> lis = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;li&quot;</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          <span class="built_in">console</span>.log(i);</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h3 id="JS-原型和原型链"><a href="#JS-原型和原型链" class="headerlink" title="JS 原型和原型链"></a>JS 原型和原型链</h3><p><strong>原型：</strong></p><ul><li><p>函数 prototype</p></li><li><p>对象 _proto_</p></li><li><p>如果 new 一个构造函数 那么函数 . prototype 和对象 ._proto_相等</p></li></ul><p><strong>原型链：</strong>就是感觉像一个链条一样，把原型链接起来，也就意味着每一个原型都有自己的原型</p><p>举例说明:person → Person → Object ，普通人继承人类，人类继承对象类</p><p>当查找某一个对象中的属性，它首先会在对象本身中查找，对象本身找不到就会去原型中查找，对象的原型中没有找到汲取对象的原型的原型中查找，直到找到原型链的最顶端，原型链的最顶端是 null ，找对象的属性找不到返回 undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">输出多少;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">  &#125;; <span class="comment">//window.getName(全局的)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">foo.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">&#125;;</span><br><span class="line">foo.prototype.getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> getName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="comment">//因为变量声明 &gt; 声明函数 所以不会执行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//foo 函数体，函数中的代码不执行</span></span><br><span class="line"><span class="comment">//foo() 执行函数</span></span><br><span class="line">foo.getName(); <span class="comment">//2</span></span><br><span class="line">getName(); <span class="comment">//4</span></span><br><span class="line">foo().getName(); <span class="comment">//1   //foo()因为return this 所以是window.getName()</span></span><br><span class="line">getName(); <span class="comment">//1</span></span><br><span class="line"><span class="keyword">new</span> foo().getName(); <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="JS-的继承有哪些方式"><a href="#JS-的继承有哪些方式" class="headerlink" title="JS 的继承有哪些方式"></a>JS 的继承有哪些方式</h3><p>原型，组合继承，class extend</p><hr><p>###JS 判断变量是不是数组，你能写出哪些方法？</p><ul><li><p><strong>数组方法 isArray()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.isArray(arr1));</span><br></pre></td></tr></table></figure></li><li><p><strong>构造函数 constructor</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr2.constructor.toString().indexOf(<span class="string">&quot;Array&quot;</span>));</span><br></pre></td></tr></table></figure></li><li><p><strong>原型 prototype + isPrototypeOf()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.prototype.isPrototype(arr3));</span><br></pre></td></tr></table></figure></li><li><p><strong>原型 prototype + toString + call()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr4 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.toString.call(arr4));</span><br></pre></td></tr></table></figure></li><li><p><strong>instanceof</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr5 = [];</span><br><span class="line"><span class="built_in">console</span>.log(arr5 <span class="keyword">instanceof</span> <span class="built_in">Array</span>);</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="slice-是干嘛的？-splcie-是否会改变原数组"><a href="#slice-是干嘛的？-splcie-是否会改变原数组" class="headerlink" title="slice 是干嘛的？ splcie 是否会改变原数组"></a>slice 是干嘛的？ splcie 是否会改变原数组</h3><hr><h3 id="JS-数组去重"><a href="#JS-数组去重" class="headerlink" title="JS 数组去重"></a>JS 数组去重</h3><ul><li><p><strong>利用 indexof 方法去重</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = []; <span class="comment">//一个新的数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="comment">//如果临时数组里没有当前数组的当前值，则把当前值push到新数组里面</span></span><br><span class="line">    <span class="keyword">if</span> (newArr.indexOf(arr[i]) == -<span class="number">1</span>) &#123;</span><br><span class="line">      newArr.push(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(fn(arr));</span><br></pre></td></tr></table></figure></li><li><p>ES6 新增的 set 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> x = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line">  <span class="keyword">return</span> [...x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line"><span class="built_in">console</span>.log(fn(arr));</span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="找出多维数组最大值"><a href="#找出多维数组最大值" class="headerlink" title="找出多维数组最大值"></a>找出多维数组最大值</h3><hr><h3 id="给字符串新增方法实现功能"><a href="#给字符串新增方法实现功能" class="headerlink" title="给字符串新增方法实现功能"></a>给字符串新增方法实现功能</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 给一个字符串&#x27;abc&#x27; 最后打印的结果 是0abc</span><br><span class="line">var str1 = &#x27;0&#x27;;</span><br><span class="line">String.prototype.addStr = function(s)&#123;</span><br><span class="line">return this + s;</span><br><span class="line">&#125;</span><br><span class="line">console.log(str1.addStr(&#x27;abc&#x27;))</span><br></pre></td></tr></table></figure><hr><h3 id="找出字符串出现最多次数的字符以及次数"><a href="#找出字符串出现最多次数的字符以及次数" class="headerlink" title="找出字符串出现最多次数的字符以及次数"></a>找出字符串出现最多次数的字符以及次数</h3><hr><h3 id="sort-背后原理是什么"><a href="#sort-背后原理是什么" class="headerlink" title="sort 背后原理是什么"></a>sort 背后原理是什么</h3><p>sort 排序始终根据元素的 unicode 编码进行排序</p><hr><h3 id="new-操作符具体干了什么"><a href="#new-操作符具体干了什么" class="headerlink" title="new 操作符具体干了什么"></a>new 操作符具体干了什么</h3><ul><li>创建了一个新对象</li><li>构造函数的 this 指向于新对象</li><li>执行构造函数中所有的代码</li><li>返回新对象</li></ul><hr><h3 id="说一下-call、apply、bind-区别"><a href="#说一下-call、apply、bind-区别" class="headerlink" title="说一下 call、apply、bind 区别"></a>说一下 call、apply、bind 区别</h3><hr><h3 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h3><hr><h3 id="localstorage、sessionstorage、cookie-的区别"><a href="#localstorage、sessionstorage、cookie-的区别" class="headerlink" title="localstorage、sessionstorage、cookie 的区别"></a>localstorage、sessionstorage、cookie 的区别</h3><hr><h3 id="var、let、const-区别"><a href="#var、let、const-区别" class="headerlink" title="var、let、const 区别"></a>var、let、const 区别</h3><ul><li><strong>var 和 let 是<code>变量</code> const 是<code>常量</code></strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>let 和 const 声明形成块作用域</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> c = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span></span><br></pre></td></tr></table></figure><ul><li><strong>var 声明变量存在变量提升，let 和 const 不存在变量提升</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined  ===&gt;  a已声明还没赋值，默认得到undefined值</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 报错：b is not defined  ===&gt; 找不到b这个变量</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 报错：c is not defined  ===&gt; 找不到c这个变量</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>同一作用域下 let 和 const 不能声明同名变量，而 var 可以</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  控制台报错：Identifier &#x27;a&#x27; has already been declared  ===&gt; 标识符a已经被声明了。</span></span><br></pre></td></tr></table></figure><ul><li><strong>暂存死区</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  a = <span class="number">10</span>;</span><br><span class="line">  <span class="comment">//在当前块作用域中存在a使用let/const声明的情况下，给a赋值10时，只会在当前作用域找变量a，</span></span><br><span class="line">  <span class="comment">// 而这时，还未到声明时候，所以控制台Error:a is not defined</span></span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>const</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 　　1、一旦声明必须赋值,不能使用null占位。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 　　2、声明后不能再修改</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 　　3、如果声明的是复合类型数据，可以修改其属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [];</span><br><span class="line">list[<span class="number">0</span>] = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(list); <span class="comment">// [10]</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">a</span>: <span class="number">100</span> &#125;;</span><br><span class="line">obj.name = <span class="string">&quot;apple&quot;</span>;</span><br><span class="line">obj.a = <span class="number">10000</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;a:10000,name:&#x27;apple&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><p><strong>什么情况下 this 指向于 window</strong></p><ul><li>普通函数</li><li>普通函数闭包的情况，内部函数 this 指向 window</li></ul><p><strong>箭头函数指向</strong></p><ul><li>箭头函数的 this 是在箭头函数定义时就决定的不是调用时(在箭头函数定义时，所在的环境决定)</li><li>箭头函数的 this 不可以修改</li><li>箭头函数不能 new</li><li>箭头函数没有 arguments</li><li>箭头函数没有 constructor</li></ul><hr><h3 id="Promise-有几种状态"><a href="#Promise-有几种状态" class="headerlink" title="Promise 有几种状态"></a>Promise 有几种状态</h3><hr><h3 id="find-和-filter-的区别"><a href="#find-和-filter-的区别" class="headerlink" title="find 和 filter 的区别"></a>find 和 filter 的区别</h3><hr><h3 id="some-和-every-的区别"><a href="#some-和-every-的区别" class="headerlink" title="some 和 every 的区别"></a>some 和 every 的区别</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS面试题</title>
      <link href="/2022/01/01/CSS%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/01/01/CSS%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍一下-css-的盒子模型"><a href="#介绍一下-css-的盒子模型" class="headerlink" title="介绍一下 css 的盒子模型"></a>介绍一下 css 的盒子模型</h3><p>盒模型分为两种:分别是 W3C 标准盒模型（普通盒模型-》content-box）和 IE 盒模型（怪异盒模型-&gt;border-box）<br><code>标准盒模型</code>:总宽度=width + margin（左右）+ padding（左右）+ border（左右）<br><code>怪异盒模型</code>：总宽度=width + margin（左右）就是说 width 已经包含了 padding 和 border 值）</p><hr><h3 id="css-选择符有哪些？哪些属性可以继承？"><a href="#css-选择符有哪些？哪些属性可以继承？" class="headerlink" title="css 选择符有哪些？哪些属性可以继承？"></a>css 选择符有哪些？哪些属性可以继承？</h3><hr><h3 id="CSS-优先级算法如何计算？"><a href="#CSS-优先级算法如何计算？" class="headerlink" title="CSS 优先级算法如何计算？"></a>CSS 优先级算法如何计算？</h3><hr><h3 id="用-css-画一个三角形"><a href="#用-css-画一个三角形" class="headerlink" title="用 css 画一个三角形"></a>用 css 画一个三角形</h3><hr><h3 id="一个盒子不给宽度和高度如何水平垂直居中"><a href="#一个盒子不给宽度和高度如何水平垂直居中" class="headerlink" title="一个盒子不给宽度和高度如何水平垂直居中"></a>一个盒子不给宽度和高度如何水平垂直居中</h3><hr><h3 id="display-有哪些值？-说明它们的作用"><a href="#display-有哪些值？-说明它们的作用" class="headerlink" title="display 有哪些值？ 说明它们的作用"></a>display 有哪些值？ 说明它们的作用</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">block                 此元素将显示为块级元素，此元素前后会带有换行符。</span><br><span class="line"></span><br><span class="line"><span class="attribute">none</span>                 此元素不会被显示。</span><br><span class="line"></span><br><span class="line">inline-block       行内块元素。</span><br><span class="line"></span><br><span class="line">list-item             此元素会作为列表显示。</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span>                 此元素会作为块级表格来显示</span><br><span class="line"></span><br><span class="line"><span class="attribute">inherit</span>               规定应该从父元素继承 <span class="attribute">display</span> 属性的值</span><br></pre></td></tr></table></figure><h3 id="对-BFC-规范（块级格式化上下文：block-formatting-context）的理解？"><a href="#对-BFC-规范（块级格式化上下文：block-formatting-context）的理解？" class="headerlink" title="对 BFC 规范（块级格式化上下文：block formatting context）的理解？"></a>对 BFC 规范（块级格式化上下文：block formatting context）的理解？</h3><p>BFC:块级格式化上下文 =&gt; 如果拥有 BFC 的特性就会导致内容元素再怎么样都不会影响外面的元素</p><p>触发 BFC：</p><ul><li><p>浮动元素：float 除 none 以外的值</p></li><li><p>绝对定位元素：position（absolute、fixed）</p></li><li><p>display 为 inline-block、table-cells、flex</p></li><li><p>overflow 除了 visible 以外的值（hidden、auto、scroll）</p></li></ul><hr><h3 id="清楚浮动有哪些方式？【重点】"><a href="#清楚浮动有哪些方式？【重点】" class="headerlink" title="清楚浮动有哪些方式？【重点】"></a>清楚浮动有哪些方式？【重点】</h3><hr><h3 id="在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3><p>偶数，文字在偶数的情况下会表现得更好看</p><hr><h3 id="写一个左右布局占满屏幕，其中左右两块固定-200，中间自适应宽高的结构样式"><a href="#写一个左右布局占满屏幕，其中左右两块固定-200，中间自适应宽高的结构样式" class="headerlink" title="写一个左右布局占满屏幕，其中左右两块固定 200，中间自适应宽高的结构样式"></a>写一个左右布局占满屏幕，其中左右两块固定 200，中间自适应宽高的结构样式</h3><hr><h3 id="什么是-CSS-reset？"><a href="#什么是-CSS-reset？" class="headerlink" title="什么是 CSS reset？"></a>什么是 CSS reset？</h3><p>reset.css ==&gt;重置样式的<br>问题： 体积大一点<br>建议：normalize.css</p><hr><h3 id="css-sprite-是什么？有什么优缺点？"><a href="#css-sprite-是什么？有什么优缺点？" class="headerlink" title="css sprite 是什么？有什么优缺点？"></a>css sprite 是什么？有什么优缺点？</h3><p>CSS Sprites 叫 CSS 精灵或者雪碧图 把网页中一些背景图片整合到一张图片文件中</p><p>优点：</p><ul><li>减少了网页的 http 请求，从而大大的提高了页面的性能</li><li>减少图片的字节</li><li>减少命名难的问题</li></ul><p>缺点：</p><ul><li>维护，修改麻烦</li></ul><hr><h3 id="line-height-和-height-有什么区别"><a href="#line-height-和-height-有什么区别" class="headerlink" title="line-height 和 height 有什么区别"></a>line-height 和 height 有什么区别</h3><hr><h2 id="height-指的是块级别元素的高度-line-height-指的是元素内容的高度会随着内容发生改变"><a href="#height-指的是块级别元素的高度-line-height-指的是元素内容的高度会随着内容发生改变" class="headerlink" title="height 指的是块级别元素的高度,line-height 指的是元素内容的高度会随着内容发生改变"></a>height 指的是块级别元素的高度,line-height 指的是元素内容的高度会随着内容发生改变</h2><hr><h3 id="position-有哪些值？有什么作用？"><a href="#position-有哪些值？有什么作用？" class="headerlink" title="position 有哪些值？有什么作用？"></a>position 有哪些值？有什么作用？</h3><ul><li><p>static [默认] 没有定位</p></li><li><p>fixed 相对于浏览器窗口定位</p></li><li><p>absolute 相对于 static 定位以外的最近的父元素进行定位</p></li><li><p>relative 相对于本身定位</p></li></ul><p>absolute 和 relative 区别</p><ul><li>relative 不脱离文档流， absolute 脱离文档流</li><li>relative 只有两个值（left、right、top、bottom 如果同时存在 left 会取代 right，top 会取代 bottom）<br>absolute 可以写 4 个值</li></ul><hr><h3 id="display：none-与-visibility：hidden-的区别"><a href="#display：none-与-visibility：hidden-的区别" class="headerlink" title="display：none 与 visibility：hidden 的区别"></a>display：none 与 visibility：hidden 的区别</h3><p>display：none 与 visibility：hidden 功能：隐藏元素</p><p>区别：<br>作用不同<br>visibility: hidden—-将元素隐藏，但是在网页中该占的位置还是占着。</p><p>display: none—-将元素的显示设为无，即在网页中不占任何的位置。</p><hr><h3 id="opacity-和-rgba-的区别"><a href="#opacity-和-rgba-的区别" class="headerlink" title="opacity 和 rgba 的区别"></a>opacity 和 rgba 的区别</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML面试题</title>
      <link href="/2022/01/01/HTML%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2022/01/01/HTML%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="行内元素有哪些？块级元素有哪些？空（void）元素有哪些？"><a href="#行内元素有哪些？块级元素有哪些？空（void）元素有哪些？" class="headerlink" title="行内元素有哪些？块级元素有哪些？空（void）元素有哪些？"></a>行内元素有哪些？块级元素有哪些？空（void）元素有哪些？</h2><p>行内元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a（锚点）,b（粗体（不强调使用））,span（常用内联容器,定义文本内区块）,</span><br><span class="line">img（图片）,input（输入框）,select（项目选择）,strong（粗体强调），</span><br><span class="line">label（表格标签）,cite（引用）,code（计算机代码）</span><br></pre></td></tr></table></figure><p>块级元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div, ul（无序列表），ol（有序列表），dl（定义列表），table（表格），</span><br><span class="line">form（表单），h1（一级标题），p（段落），pre（预格式化）</span><br></pre></td></tr></table></figure><p>空元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">br， hr， meta， head...</span><br></pre></td></tr></table></figure><p>如果要涉及到元素之间的转换</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">display</span>:block 块级元素</span><br><span class="line">display:inline-block 行内块级元素</span><br><span class="line">display:inline  行内元素</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="页面导入样式时，link-和-import-的区别"><a href="#页面导入样式时，link-和-import-的区别" class="headerlink" title="页面导入样式时，link 和@import 的区别?"></a>页面导入样式时，link 和@import 的区别?</h2><ul><li>linlk 是一个标签，@import 是 css 的内容</li><li>link 先加载，@import 后加载 【重点】</li><li>兼容问题 @import (ie6 以下不支持)</li><li>link 标签可由 dom 控制。@import 不能</li></ul><p>共同作用：引入样式表</p><hr><h2 id="title-和-h1-的区别，b-与-strong-的区别，i-与-em-的区别"><a href="#title-和-h1-的区别，b-与-strong-的区别，i-与-em-的区别" class="headerlink" title="title 和 h1 的区别，b 与 strong 的区别，i 与 em 的区别"></a>title 和 h1 的区别，b 与 strong 的区别，i 与 em 的区别</h2><p>title 和 h1 的区别：</p><ul><li>title 是网页的标题，是写给搜索引擎看的，写在 head 里面；title 标签里的文本不出现在页面内容里面。</li><li>h1 是文章的标题，是给用户看的，写在 body 里面。h1 标签里的文本不出现在页面内容里面</li></ul><p>b 与 strong 的区别：</p><ul><li>语义化</li><li>b 是一个加粗的标签，只是为了加粗而加粗<br>strong 也是一个加粗的标签，但是有加重语气的含义 在搜索引擎中更受重视</li></ul><p>i 与 em 的区别：</p><ul><li>语义化</li><li>都是倾斜，i 没有特殊含义，现在一般来作为图标 em 有特殊含义，但是有加重语气的含义 在搜索引擎中更受重视</li></ul><hr><h2 id="img-标签的-title-和-alt-有什么区别？"><a href="#img-标签的-title-和-alt-有什么区别？" class="headerlink" title="img 标签的 title 和 alt 有什么区别？"></a>img 标签的 title 和 alt 有什么区别？</h2><ul><li>title:对图片的描述与进一步说明</li><li>alt 是 img 标签的特有属性，当图片不存在时的替代文字</li><li>搜索引擎对图片意思的判断，主要靠 alt 属性</li></ul><hr><h2 id="png-jpg-gif-这些图片格式解释一下，分别有什么作用？"><a href="#png-jpg-gif-这些图片格式解释一下，分别有什么作用？" class="headerlink" title="png, jpg, gif 这些图片格式解释一下，分别有什么作用？"></a>png, jpg, gif 这些图片格式解释一下，分别有什么作用？</h2><ul><li>jpg、jpeg: 适合大图片（banner）， 【失真】</li><li>png: 适合小图标（图标）， 【失真小】</li><li>gif：动图</li></ul><hr>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 前端面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 面试 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
